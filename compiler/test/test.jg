import * from '//compiler/prelude.jg'
import * from '//compiler/result.jg'

failMsg = maybeErr

changeMsg = mapErr

withMsg m = changeMsg (\_ -> m)

prefixMsg p = changeMsg (\m -> p ++ ': ' ++ m)

data Test = Test String (Unit -> Array (Result String Unit))

testOk = Ok Unit
testFail m = Err m

assertTrue p = case p of
  True -> testOk
  False -> testFail 'want True, got False'

assertEq a b =
  withMsg ('want ' ++ jsonStringify a ++ ', got ' ++ jsonStringify b) $ assertTrue (a == b)

runTests topMsg tests = let
  tmp = \_ -> error ''
  runTest (Test desc f) = let
    rs = f Unit
    fs = mapJust failMsg rs
    in case (length fs) of
      0 -> debug2 ('  PASS: ' ++ desc) testOk
      _ -> debug2 ('  FAIL: ' ++ desc) (testFail ('  FAIL: ' ++ desc ++ '\n' ++ join (map (\f -> '    ' ++ f) fs) '\n'))
  rs = map runTest tests
  fs = mapJust failMsg rs
  in case (length fs) of
    0 -> debug2 (topMsg ++ ': ' ++ intToString (length rs) ++ ' tests passed') Unit
    _ -> error (topMsg ++ ': ' ++ intToString (length rs - length fs) ++ ' tests passed\n' ++ join fs '\n')
