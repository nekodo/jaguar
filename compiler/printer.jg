import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'

printType t = 
  let
    printParen t = '(' ++ printType t ++ ')'
    printTypeInFun t = case t of
      TApp _ (TApp _ (TConst _ '->') c) d -> printParen t
      TForall _ vs _ a -> printParen t
      _ -> printType t
    printFirstTypeInApp t = case t of
      TApp _ (TApp _ (TConst _ '->') a) b -> printParen t
      TForall _ vs _ a -> printParen t
      _ -> printType t
    printSecondTypeInApp t = case t of
      TApp _ a b -> printParen t
      TForall _ vs _ a -> printParen t
      _ -> printType t
  in case t of
    TConst _ t -> t
    TVar _ v -> v
    TSkolem _ v -> '~' ++ v
    TBot -> '~bottom~'
    TUnknown -> '?'
    TApp _ (TApp _ (TConst _ '->') a) b ->
      printTypeInFun a ++ ' -> ' ++ printType b
    TApp _ a b ->
      printFirstTypeInApp a ++ ' ' ++ printSecondTypeInApp b
    TForall _ vs bs a -> let
      bounds = case (length bs) of
        0 -> ''
        _ -> ' with ' ++ intercalate ', ' (map printTypeBound bs)
      in 'forall ' ++ intercalate ', ' vs ++ bounds ++ '. ' ++ printType a
    TRow _ kvs (Nothing) -> let
      f (k, v) = printType k ++ ' : ' ++ printType v
      pkvs = map f kvs
      in '{' ++ intercalate ', ' pkvs ++ '}'
    _ -> error ('cannot print ' ++ jsonStringify t)

printTypeBound b = case b of
  TCBound _ n t -> n ++ ' ' ++ '(' ++ printType t ++ ')'

printExprTyped typed e = 
  let
    printParen e = sameLine3 ['('] (printExpr e) [')']
    sameLine xs ys =
      concat (init xs) (enqueue (last xs ++ head ys) (tail ys))
    sameLine3 a b c = sameLine a (sameLine b c)
    printCasePat cp = case cp of
      Pair p e -> 
        enqueue
          (printPat p ++ ' ->')
          (indent (printExpr e))
    printPat p = case p of
      PVar _ v -> v
      PConst _ (CNum n) -> jsonStringify n
      PConst _ (CStr s) -> jsonStringify s
      PData _ n ps -> n ++ ' (' ++ join (map printPat ps) ') (' ++ ')'
    printE e = case e of
      Var _ n -> [n]
      Const _ (CNum n) -> [jsonStringify n]
      Const _ (CStr s) -> [jsonStringify s]
      App _ f a ->
        sameLine3 (printParen f) [' '] (printParen a)
      Lam _ v e ->
        enqueue ('\\' ++ v ++ ' ->') (indent (printExpr e))
      Case _ e ps ->
        concat
          (sameLine3 ['case '] (printParen e) [' of'])
          (indent (concatMap printCasePat ps))
      Let _ ds e ->
        concat
          (push
            'in'
            (enqueue
              'let'
              (indent (concatMap (printDef typed) ds))))
          (indent (printExpr e))
      New _ n xs ->
        push n (indent (concatMap (printExprTyped typed) xs))
    printT e = let
      t = getType e
      in printType t
    printExpr e = case typed of
      False -> printE e
      True -> sameLine3 ['('] (printE e) [' :: ' ++ printT e ++ ' )']
    pe = printE e
  in printExpr e

printDef typed d = case d of
  Pair n e ->
    enqueue
      (n ++ ' =')
      (indent (printExprTyped typed e))

indent = map (\l -> '  ' ++ l)

reallyPrintExpr typed e = join (printExprTyped typed e) '\n'

printInst (Inst vs b) = 'forall ' ++ join vs ' ' ++ '. ' ++ printTypeBound b
