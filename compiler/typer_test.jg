import * from '//compiler/prelude.jg'
import {assertTrue, assertEq, runTests, Test, withMsg} from '//compiler/test/test.jg'
import * from '//compiler/typer.jg'
import * from '//compiler/ast.jg'
import {printType} from '//compiler/printer.jg'
import {parseModule, parseExpr} from '//compiler/jaguarParser.jg'
import {Success, Error} from '//compiler/parsers.jg'

assertEquivType a b = let
  msg = 'want type equivalent to ' ++ printType a ++ ', but got ' ++ printType b
  in withMsg msg $ assertTrue (equivType a b)

mustParseExpr testName s = case (parseExpr s testName) of
  Error e -> error e
  Success e _ -> e

mustParseModule testName s = case (parseModule s testName) of
  Error e -> error e
  Success m _ -> m

tests = [
    Test 'int lit type' $ \_ -> let
      want = TConst emptyAnn 'Int'
      got = TConst emptyAnn 'Int'
      in [assertEquivType want got]
  ]

main argv = runTests 'typer_test' tests
