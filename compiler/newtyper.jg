import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {printType, printTypeBound, reallyPrintExpr, printDef} from '//compiler/printer.jg'
import {sccSorted} from '//compiler/graph.jg'

data ICtx =
  ModuleCtx String
  | BindingCtx String
  | ExprCtx Expr
  | UnifyCtx Type Type
  | UpdateCtx String Type
  | PatCtx Pat

data InferenceResult a = IOk a | IErr (Array ICtx) String

instance Functor InferenceResult where
  fmap f a = case a of
    IErr ctx m -> IErr ctx m
    IOk a -> IOk (f a)

instance Monad InferenceResult where
  ret = IOk
  (>>=) a f = case a of
    IErr ctx m -> IErr ctx m
    IOk a -> f a

invert m = m >>= \a -> fmap ret a

(>>=>>) m f = m >>= \r -> case r of
  IErr ctx m -> ret (IErr ctx m)
  IOk x -> f x

(>>>>) m n = m >>=>> \_ -> n

foldOk f r xs = foldl (\r x -> r >>=>> \r -> f r x) (ret $ IOk r) xs
mapOk f xs = foldOk (\rs x -> f x >>=>> \r -> ret (IOk $ push r rs)) [] xs

tnum = TConst emptyAnn 'Number'
tstr = TConst emptyAnn 'String'
tapp = TApp emptyAnn
tfun a b = tapp (tapp (TConst emptyAnn '->') a) b

varsInType t =
  case t of
    TConst _ _ -> Empty
    TVar _ v -> setAdd v Empty
    TSkolem _ _ -> Empty
    TApp _ f a -> setUnion (varsInType f) (varsInType a)
    _ -> error ('unsupported type in varsInType ' ++ jsonStringify t)

replaceVar v vt t =
  case t of
    TConst _ _ -> t
    TSkolem _ _ -> t
    TVar _ w -> case (v == w) of
      True -> vt
      False -> t
    TApp ann f a -> TApp ann (replaceVar v vt f) (replaceVar v vt a)
    TForall ann vs bs t -> TForall ann vs bs (replaceVar v vt t)
    _ -> error ('unsupported type in replaceVar ' ++ jsonStringify t)

forceType t = let
  changed a b =
    case a of
      TVar _ v -> case b of
        TVar _ w -> v /= w
        _ -> True
      _ -> False
  in case t of
    TVar _ v -> gets >>= \(US vars _) ->
      case (lookup v vars) of
        Nothing -> ret t
        Just t -> forceType t >>= \t2 ->
          case (changed t t2) of
            True -> setVar v t2 >> ret t2
            False -> ret t2
    _ -> ret t

setVar v t = gets >>= \(US vars n) -> sets $ US (insert v t vars) n

unifyType ctx a b = let
  ctx2 = push (UnifyCtx a b) ctx
  ok a = ret $ IOk a
  err m = ret $ IErr ctx2 m
  in forceType a >>= \a -> forceType b >>= \b -> case (a, b) of
    (TVar _ v, TVar _ w) -> case (preferredVar v w) of
      True -> setVar w a >> ok a
      False -> setVar v b >> ok b
    (TVar _ v, _) -> setVar v b >> ok b
    (_, TVar _ w) -> setVar w a >> ok a
    (TConst _ n, TConst _ m) -> case (n == m) of
      True -> ok a
      False -> err 'type name mismatch'
    (TSkolem _ v, TSkolem _ w) -> case (v == w) of
      True -> ok a
      False -> err 'skolem mismatch'
    (TApp _ fa xa, TApp _ fb xb) -> unifyType ctx2 fa fb >>=>> \fu -> 
      unifyType ctx2 xa xb >>=>> \xu -> ok (tapp fu xu)
    _ -> err 'cannot unify'

// State for type unification.
// First map is type var to type.
// Second map is type var to type vars which contain it.
data UnifierState = US (Map String Type) Number

freshName = gets >>= \(US vars n) -> let
  v = '$' ++ intToString n
  n2 = n + 1
  in sets (US vars n2) >> ret v

freshVar = fmap (TVar emptyAnn) freshName

preferredVar v w = case (length v == length w) of
  True -> v < w
  False -> length v < length w

instantiate t = let
  addRep reps v = freshVar >>= \t ->
    ret $ insert v t reps
  replaceSkolems t reps =
    case t of
      TSkolem _ n -> case (lookup n reps) of
        Nothing -> ret t
        Just v -> ret v
      TApp ann f a -> replaceSkolems f reps >>= \fr ->
        replaceSkolems a reps >>= \ar ->
          ret $ TApp ann fr ar
      _ -> ret t
  in case t of
    TForall _ vs _ t ->
      foldM addRep Empty vs >>= replaceSkolems t
    _ -> ret t

resolveName ctx n scope =
  case (lookup n scope) of
    Nothing -> ret $ IErr ctx 'name not in scope'
    Just t -> fmap IOk $ instantiate t

inferExpr ctx scope e = let
  ctx2 = push (ExprCtx e) ctx
  ok e = ret $ IOk e
  err m = ret $ IErr ctx2 m
  finalize e t = case (getType e) of
    TUnknown -> ok (setType t e)
    t2 -> unifyType ctx2 t t2 >>>> ok e
  in case e of
    Const _ (CNum _) -> finalize e tnum
    Const _ (CStr _) -> finalize e tstr
    Var _ v -> resolveName ctx v scope >>=>> finalize e
    App ann f a -> inferExpr ctx2 scope f >>=>> \fi ->
      inferExpr ctx2 scope a >>=>> \ai ->
        freshVar >>= \v ->
          unifyType ctx2 (getType fi) (tfun (getType ai) v) >>>>
            finalize (App ann fi ai) v
    Lam ann p e ->
      freshVar >>= \v ->
        inferExpr ctx2 (insert p v scope) e >>=>> \ei ->
          finalize (Lam ann p ei) (tfun v (getType ei))
    Gen ann e -> case (getAnnType ann) of
      TForall _ _ _ t ->
        inferExpr ctx2 scope e >>=>> \ei ->
          unifyType ctx2 t (getType ei) >>>>
            ok (Gen ann ei) 
      _ -> err 'Gen expr without a TForall type'
    Case ann e ps -> let
      collectBindings scope p =
        case p of
          PConst _ _ -> scope
          PVar _ v -> insert v (getPatType p) scope
          PData _ _ ps -> foldl collectBindings scope ps
      inferCase pt rt (p, e) =
        inferPat ctx2 scope p >>=>> \pi ->
          unifyType ctx2 pt (getPatType p) >>=>> \_ ->
            inferExpr ctx2 (collectBindings scope pi) e >>=>> \ei ->
              unifyType ctx2 rt (getType ei) >>>>
                ok (pi, ei)
      in inferExpr ctx2 scope e >>=>> \ei ->
        freshVar >>= \rt ->
          mapOk (inferCase (getType ei) rt) ps >>=>> \psi ->
            finalize (Case ann ei psi) rt

consType dataType argTypes = foldr (\d t -> tfun t d) dataType argTypes

inferPat ctx scope p = let
  ctx2 = push (PatCtx p) ctx
  ok p = ret $ IOk p
  err m = ret $ IErr ctx2 m
  finalize p t = case (getPatType p) of
    TUnknown -> ok (setPatType t p)
    t2 -> unifyType ctx2 t t2 >>>> ok p
  in case p of
    PVar _ _ -> freshVar >>= finalize p
    PConst _ (CNum _) -> finalize p tnum
    PConst _ (CStr _) -> finalize p tstr
    PData ann n ps ->
      mapOk (inferPat ctx2 scope) ps >>=>> \psi ->
        freshVar >>= \dt ->
          resolveName ctx2 n scope >>=>> \ct ->
            unifyType ctx2 ct (consType dt (map getPatType psi)) >>>>
              finalize (PData ann n psi) dt
