import * from '//compiler/prelude.jg'

data Ann = Ann Type
emptyAnn = Ann TUnknown

data Expr =
  Var Ann String
  | Const Ann CVal
  | App Ann Expr Expr
  | Lam Ann String Expr
  | Case Ann Expr (Array (Pair Pat Expr))
  | Let Ann (Array (Pair String Expr)) Expr

data CVal =
  CNum Number
  | CStr String

data Pat =
  PVar Ann String
  | PConst Ann CVal
  | PData Ann String (Array Pat)

data Module = Module
  Ann                        // annotations
  (Array Import)             // imports
  (Array Data)               // ADT definitions
  (Array (Pair String Expr)) // value definitions

data Data = Data Ann String (Array String) (Array DataCon)
data DataCon = DataCon Ann String (Array Type)

data Type =
  TConst Ann String
  | TVar Ann String
  | TApp Ann Type Type
  | TBot Ann
  | TForall Ann String Type
  | TUnknown Ann

data Import =
  ImportClosed Ann String String
  | ImportOpen Ann String (Array String)
  | ImportAll Ann String

dataConName = \dc -> case dc of DataCon _ n ts -> n
dataConNames = \d -> case d of Data _ n ps cs -> map dataConName cs
getExports = \m -> case m of
    Module _ is ds vs -> concat (concatMap dataConNames ds) (map fst vs)
