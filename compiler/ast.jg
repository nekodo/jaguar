import * from '//compiler/prelude.jg'

data Ann =
  AnnType Type
  | AnnCodeLoc String Number Number // codeLoc: file, line col
  | AnnUseCount (Map String Number) // useCount
  | AnnData (Maybe Number)          // data
  | AnnTag                          // dead
  | AnnExport String                // export
emptyAnn = Empty

getAnn name ann = lookup name ann
setAnn name val ann = insert name val ann
copyAnn names ann = let
  f r n = case (getAnn n ann) of
    Nothing -> r
    Just a -> setAnn n a r
  in foldl f Empty names

getAnnE name e = getAnn name (annOf e)
hasAnnE name e = isJust (getAnnE name e)

getAnnType ann = case (getAnn 'type' ann) of
  Just (AnnType t) -> t
  Nothing -> TUnknown
setAnnType t ann = setAnn 'type' (AnnType t) ann

getAnnCodeLoc ann = getAnn 'codeLoc' ann
setAnnCodeLoc file line col ann = setAnn 'codeLoc' (AnnCodeLoc file line col) ann
printCodeLoc l = case l of
  AnnCodeLoc file line col ->
    'in ' ++ file ++ ' at line ' ++ intToString (line + 1) ++ ', column ' ++ intToString (col + 1)

exprLoc e = case (getAnnCodeLoc $ annOf e) of
  Nothing -> 'in unknown location'
  Just l -> printCodeLoc l

data Expr =
  Var (Map String Ann) String
  | Const (Map String Ann) CVal
  | App (Map String Ann) Expr Expr
  | Lam (Map String Ann) String Expr
  | Case (Map String Ann) Expr (Array (Pair Pat Expr))
  | Let (Map String Ann) (Array (Pair String Expr)) Expr
  | New (Map String Ann) String (Array Expr)
  | Gen (Map String Ann) Expr

data CVal =
  CNum Number
  | CStr String

data Pat =
  PVar (Map String Ann) String
  | PConst (Map String Ann) CVal
  | PData (Map String Ann) String (Array Pat)

namesInPat p = case p of
  PVar _ v -> [v]
  PConst _ c -> []
  PData _ n ps -> foldl mergeSet [] (map namesInPat ps)

data Module = Module
  (Map String Ann)           // annotations
  String                     // path
  (Array Import)             // imports
  (Array Data)               // ADT definitions
  (Array Class)              // type class definitions
  (Array (Pair String Instance))           // type class instances
  (Array (Pair String Expr)) // value definitions

data ModuleInterface = ModuleInterface
  (Record Type)      // exported bindings, includes ADT constructors
  (Array Class)      // exported classes
  (Map String TypeBound)  // exported class instances

data Data = Data (Map String Ann) String (Array String) (Array DataCon)
data DataCon = DataCon (Map String Ann) String (Array Type)

data Class = Class
  (Map String Ann)
  String     // name
  String     // type var
  (Array (Pair String Type))

data Instance = Instance
  (Map String Ann)
  String     // class name
  Type       // type for which we're defining the instanc
  (Array (Pair String Expr))

data TypeBound =
  TCBound  // type class bound
    (Map String Ann)    // annotation
    String // name of the type class
    Type   // param

equivBound a b = case a of
  TCBound _ n t -> case b of
    TCBound _ n2 t2 -> (n == n2) && equivType t t2

data Type =
  TConst (Map String Ann) String
  | TVar (Map String Ann) String
  | TSkolem (Map String Ann) String
  | TApp (Map String Ann) Type Type
  | TRow (Map String Ann) (Array (Pair Type Type)) (Maybe Type)
  | TBot
  | TForall (Map String Ann) (Array String) (Array TypeBound) Type
  | TUnknown

equivType a b = case a of
  TConst _ n -> case b of
    TConst _ n2 -> n == n2
    _ -> False
  TVar _ v -> case b of
    TVar _ v2 -> v == v2
    _ -> False
  TSkolem _ v -> case b of
    TSkolem _ v2 -> v == v2
    _ -> False
  TApp _ f a -> case b of
    TApp _ f2 a2 -> equivType f f2 && equivType a a2
    _ -> False
  TBot -> case b of
    TBot -> True
    _ -> False
  TUnknown -> case b of
    TUnknown -> True
    _ -> False
  TRow _ ms r -> error 'no support for TRow in equivType yet'
  TForall _ vs bs t -> case b of
    TForall _ vs2 bs2 t2 -> let
      rvs = all (\p -> fst p == snd p) (zip vs vs2)
      rbs = all (\p -> equivBound (fst p) (snd p)) (zip bs bs2)
      in rvs && rbs && equivType t t2
    _ -> False

data Import =
  ImportClosed (Map String Ann) String String
  | ImportOpen (Map String Ann) String (Array (Pair String String))
  | ImportAll (Map String Ann) String

dataConName = \dc -> case dc of DataCon _ n ts -> n
dataConNames = \d -> case d of Data _ n ps cs -> map dataConName cs

setType t e = case e of
  Var ann v -> Var (setAnnType t ann) v
  Const ann c -> Const (setAnnType t ann) c
  App ann f a -> App (setAnnType t ann) f a
  Lam ann p b -> Lam (setAnnType t ann) p b
  Case ann e ps -> Case (setAnnType t ann) e ps
  Let ann ds e -> Let (setAnnType t ann) ds e
  New ann tag es -> New (setAnnType t ann) tag es
  Gen ann e -> Gen (setAnnType t ann) e

annOf e = case e of
  Var ann v -> ann
  Const ann c -> ann
  App ann f a -> ann
  Lam ann p b -> ann
  Case ann e ps -> ann
  Let ann ds e -> ann
  New ann _ _ -> ann
  Gen ann _ -> ann

withAnn ann e = case e of
  Var _ v -> Var ann v
  Const _ c -> Const ann c
  App _ f a -> App ann f a
  Lam _ p b -> Lam ann p b
  Case _ e ps -> Case ann e ps
  Let _ ds e -> Let ann ds e
  New _ tag es -> New ann tag es
  Gen _ e -> Gen ann e

getType e = getAnnType $ annOf e

getPatType p = case p of
  PVar ann _ -> getAnnType ann
  PConst ann _ -> getAnnType ann
  PData ann _ _ -> getAnnType ann

breakableDownAndUp down up a e = let
  go = breakableDownAndUp down up
  gos a = foldl (\ar p -> case (go (fst ar) (snd p)) of Pair a2 e -> Pair a2 (push (Pair (fst p) e) (snd ar))) (Pair a [])
  in case (down a e) of
    Right ae -> ae
    Left (Pair a2 e2) -> let
      ae = case e2 of
        Lam ann p e -> case (go a2 e) of
          Pair a e -> Pair a (Lam ann p e)
        App ann f x -> case (go a2 f) of
          Pair a f -> case (go a x) of
            Pair a x -> Pair a (App ann f x)
        Case ann e ps -> case (go a2 e) of
          Pair a e -> case (gos a ps) of
            Pair a ps -> Pair a (Case ann e ps)
        Let ann bs e -> case (gos a2 bs) of
          Pair a bs -> case (go a e) of
            Pair a e -> Pair a (Let ann bs e)
        New ann tag es -> let
          f aes e = case aes of
            Pair a es -> case (go a e) of
              Pair a e -> Pair a (push e es)
          in case (foldl f (Pair a []) es) of
            Pair a es -> Pair a (New ann tag es)
        _ -> Pair a2 e2
      in case ae of
        Pair a e -> up a e

downAndUp down up = breakableDownAndUp (\a e -> Left (down a e)) up

up = downAndUp Pair
down f = downAndUp f Pair
breakableDown f = breakableDownAndUp f Pair

breakableDownAndUpM down up e = let
  go = breakableDownAndUpM down up
  gos = mapM (\d -> case d of Pair n e -> go e >>= \e -> ret (Pair n e))
  in down e >>= \e -> case e of
    Right e -> ret e
    Left e -> case e of
      Lam ann p e -> go e >>= \e -> up (Lam ann p e)
      App ann f x -> go f >>= \f -> go x >>= \x -> up (App ann f x)
      Case ann e ps -> go e >>= \e -> gos ps >>= \ps -> up (Case ann e ps)
      Let ann bs e -> gos bs >>= \bs -> go e >>= \e -> up (Let ann bs e)
      New ann tag es -> mapM go es >>= \es -> up (New ann tag es)
      _ -> up e

downAndUpM down up = breakableDownAndUpM (\e -> down e >>= \e -> ret (Left e)) up
upM = downAndUpM ret
downM f = downAndUpM f ret
breakableDownM f = breakableDownAndUpM f ret
