import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import * from '//compiler/parsers.jg'
import {tokenize, Token, WsTok, SymTok, NumTok, StrTok, OpTok, IdTok, ComTok} from '//compiler/jaguarLexer.jg'

data ParserState = ParserState
  (Array Token) // input (ts)
  Number // position (p)
  Number // current line indent (li)
  Number // required line indent (ri)
  String // filename

mkParserState ts f = ParserState ts 0 (case (getIx 0 ts) of Token t v l c -> c) 0 f

filterWhitespaceAndComments = filter (\t -> case t of
  Token (WsTok) v l c -> False
  Token (ComTok) v l c -> False
  t -> True)

runParser p s f = case (tokenize s) of
  Success ts s -> applyParser p (mkParserState (filterWhitespaceAndComments ts) f)
  Error e -> Error e

parseToken f = let
  parse s = case s of
    // Check that we have not ran out of tokens.
    ParserState ts p li ri fn -> case (p < length ts) of
      False -> Error 'run out of tokens'
      // Check that the indentation is sufficient.
      True -> case (getIx p ts) of
        Token t v l c -> case (c < ri) of
          True -> Error 'token not indented sufficiently'
          // Run the actual token parsing function.
          False -> case (f (getIx p ts)) of
            Nothing -> Error 'parser fun failed'
            // Success, now need to update the position and current line indent.
            Just r -> case ((p + 1) < length ts) of
              False -> Success r (ParserState ts (p + 1) li ri fn)
              True -> case (getIx (p + 1) ts) of
                Token t v l2 c -> case (l2 > l) of
                  False -> Success r (ParserState ts (p + 1) li ri fn)
                  True -> Success r (ParserState ts (p + 1) c ri fn)
  in Parser parse

locP = let
  parse s = case s of
    ParserState ts p _ _ fn -> case (p < length ts) of
      False -> Error 'run out of tokens'
      // Check that the indentation is sufficient.
      True -> case (getIx p ts) of
        Token _ _ l c -> Success (withLocAnn $ AnnCodeLoc fn l c) s
  in Parser parse

(<*->) pf pa = case pf of
  Parser pf -> case pa of
    Parser pa -> let
      parse s = case s of
        ParserState ts p li ri fn -> case (pf s) of
          Success f (ParserState ts p2 li2 ri2 fn) -> case (pa (ParserState ts p2 li2 (li + 1) fn)) of
            Success a (ParserState ts p3 li3 ri3 fn) -> Success (f a) (ParserState ts p3 li3 ri fn)
            Error e -> Error e
          Error e -> Error e
      in Parser parse

(|->) pa pb = pure (\_ b -> b) <*> pa <*-> pb

reserved = ['as', 'class', 'where', 'instance', 'let', 'in', 'from', 'import', 'case', 'of', 'data']

symP s = parseToken (\t -> case t of
  Token (SymTok) v i c -> case (v == s) of
    True -> Just s
    False -> Nothing
  x -> Nothing)

operatorP s = parseToken (\t -> case t of
  Token (OpTok) v i c -> case (v == s) of
    True -> Just s
    False -> Nothing
  x -> Nothing)

anyOpP = parseToken (\t -> case t of
  Token (OpTok) v i c -> Just v
  x -> Nothing)

reservedP s = parseToken (\t -> case t of
  Token (IdTok) v i c -> case (v == s) of
    True -> Just s
    False -> Nothing
  x -> Nothing)

nonReservedP = parseToken (\t -> case t of
  Token (IdTok) v l c -> case (contains v reserved) of
    True -> Nothing
    False -> Just v
  x -> Nothing)

upperCaseId = parseToken (\t -> case t of
  Token (IdTok) v i c -> case (containsChar (getChar 0 v) upperCaseLetters) of
    True -> Just v
    False -> Nothing
  t -> Nothing)

notUpperCaseId = parseToken (\t -> case t of
  Token (IdTok) v i c -> case (containsChar (getChar 0 v) upperCaseLetters) of
    False -> case (contains v reserved) of
      False -> Just v
      True -> Nothing
    True -> Nothing
  t -> Nothing)

parenP p = symP '(' |> p <| symP ')'

withLocAnn a = setAnn 'codeLoc' a emptyAnn
withLocOf e = withLocAnn (fromJust $ getAnn 'codeLoc' (annOf e))

varP = pure Var <*> locP <*> parseToken (\t -> case t of
  Token (IdTok) v l c -> case (contains v reserved) of
    True -> Nothing
    False -> Just v
  x -> Nothing)

cnumP = pure Const <*> locP <*> parseToken (\t -> case t of
  Token (NumTok) v l c -> Just (CNum (unsafeStringToInt v))
  x -> Nothing)

cstrP = pure Const <*> locP <*> parseToken (\t -> case t of
  Token (StrTok) v l c -> Just (CStr v)
  x -> Nothing)
  
constP = cstrP <|> cnumP

exprP = Parser (\s -> applyParser opP s)

arrayLitP = pure (\ann xs -> New ann 'Array' xs) <*>
  locP <*> (symP '[' |> sepBy exprP (symP ',') <| symP ']')

tupleLitP = let
  f ann e es = let
    cons = case (length es) of
      1 -> 'Pair'
      2 -> 'Tuple3'
      3 -> 'Tuple4'
      4 -> 'Tuple5'
      5 -> 'Tuple6'
    in foldl (App ann) (App ann (Var ann cons) e) es
  in pure f <*> locP <*> (symP '(' |> (exprP <| symP ',')) <*> (sepBy1 exprP (symP ',') <| symP ')')

simpleExprP = varP <|> constP <|> arrayLitP <|> tupleLitP <|> parenP exprP

appP = pure (foldl (\f a -> App (withLocOf f) f a)) <*>
  (varP <|> parenP exprP) <*-> many simpleExprP

patP = Parser (\s -> applyParser allPatP s)

mkPatLam l p a = case p of
  PVar _ p -> Lam l p a
  _ -> Lam l '$pat' (Case l (Var l '$pat') [(p, a)])

lamP = pure (\l ps a -> foldr (\a p -> mkPatLam l p a) a ps) <*>
  locP <*> (symP '\\' |-> some patP) <*-> (operatorP '->' |> exprP)

pvarP = pure PVar <*> locP <*> notUpperCaseId

pcnumP = pure PConst <*> locP <*> parseToken (\t -> case t of
  Token (NumTok) v l c -> Just (CNum (unsafeStringToInt v))
  x -> Nothing)

pcstrP = pure PConst <*> locP <*> parseToken (\t -> case t of
  Token (StrTok) v l c -> Just (CStr v)
  x -> Nothing)

strP = parseToken (\t -> case t of
  Token (StrTok) v l c -> Just v
  x -> Nothing)

pconstP = pcnumP <|> pcstrP

pdataP = pure PData <*>
  locP <*> upperCaseId <*-> many patP

nakedPatP = patP <|> pdataP

ptupleP = let
  f ann p ps = let
    cons = case (length ps) of
      1 -> 'Pair'
      2 -> 'Tuple3'
      3 -> 'Tuple4'
      4 -> 'Tuple5'
      5 -> 'Tuple6'
    in PData ann cons (enqueue p ps)
  in pure f <*> locP <*> (symP '(' |> (nakedPatP <| symP ',')) <*> (sepBy1 nakedPatP (symP ',') <| symP ')')
  
allPatP = pvarP <|> pconstP <|> parenP pdataP <|> ptupleP

ofP = pure Pair <*>
  nakedPatP <*-> (operatorP '->' |> exprP)

caseP = pure Case <*>
  locP <*> (reservedP 'case' |-> simpleExprP) <*-> (reservedP 'of' |> some ofP)

mkDefs l p e = case p of
  PVar _ n -> [(n, e)]
  _ -> let
    id = case (getAnnCodeLoc l) of
      Just (AnnCodeLoc _ l c) -> '$pat_' ++ intToString l ++ '_' ++ intToString c
    in enqueue (id, e) (map (\n -> (n, Case l (Var emptyAnn id) [(p, Var emptyAnn n)])) (namesInPat p))

defP = pure (\l lhs ps e -> mkDefs l lhs (foldr (\e p -> mkPatLam l p e) e ps)) <*>
  locP <*> nakedPatP <*-> many patP <*-> (operatorP '=' |> exprP)

defsP = pure (foldl concat []) <*> some defP

letP = pure Let <*>
  locP <*> (reservedP 'let' |-> defsP) <*> (reservedP 'in' |-> exprP)

primaryExprP = appP <|> constP <|> lamP <|> caseP <|> letP <|> arrayLitP <|> tupleLitP

opP = pure (\e oes -> foldl (\a lob -> case lob of Pair l (Pair op b) -> App l (App l (Var l op) a) b) e oes) <*>
  primaryExprP <*-> many (pure (\l op e -> Pair l (Pair op e)) <*> locP <*> anyOpP <*> primaryExprP)

// --------------- types -------------------

typeP = Parser (\s -> applyParser tfunP s)

tconstP = pure (TConst emptyAnn) <*> upperCaseId

tvarP = pure (TVar emptyAnn) <*> notUpperCaseId

simpleTypeP = tconstP <|> tvarP <|> parenP typeP

tappP = pure (foldl (TApp emptyAnn)) <*>
  simpleTypeP <*-> many simpleTypeP

tfunP = pure (\t ts -> foldr1 (\b a -> TApp emptyAnn (TApp emptyAnn (TConst emptyAnn '->') a) b) (enqueue t ts)) <*>
  tappP <*-> many (operatorP '->' |> tappP)

// ------------ type classes ---------------

classP = pure (\name tv maybeDefs -> Class emptyAnn name tv (justOr [] maybeDefs)) <*>
  (reservedP 'class' |-> upperCaseId) <*-> notUpperCaseId <*-> opt (reservedP 'where' |> some classMemberP)

classMemberP = pure Pair <*>
  notUpperCaseId <*-> (operatorP '::' |> typeP)

instanceP = pure (\name t maybeDefs -> Instance emptyAnn name t (justOr [] maybeDefs)) <*>
  (reservedP 'instance' |-> upperCaseId) <*-> simpleTypeP <*-> opt (reservedP 'where' |> defsP)

// --------------- module ------------------

dataConP = pure (DataCon emptyAnn) <*>
  upperCaseId <*-> many simpleTypeP

dataP = pure (Data emptyAnn) <*>
  (reservedP 'data' |-> upperCaseId) <*-> many notUpperCaseId <*-> (operatorP '=' |> sepBy1 dataConP (operatorP '|'))

importNoAliasP = pure (\n -> Pair n n) <*> nonReservedP

importAliasP = pure Pair <*> nonReservedP <*> (reservedP 'as' |> nonReservedP)

importOpenP = pure (\ns f -> ImportOpen emptyAnn f ns) <*>
  (symP '{' |> sepBy1 (importAliasP <|> importNoAliasP) (symP ',') <| symP '}') <*> (reservedP 'from' |> strP)

importAllP = pure (ImportAll emptyAnn) <*>
  (operatorP '*' |> reservedP 'from' |> strP)

importP = reservedP 'import' |> (importOpenP <|> importAllP)

moduleP = pure (\loc is es -> case (splitFourWay es) of Pair (Pair dts dfs) (Pair cs ins) -> Module loc (case (getAnnCodeLoc loc) of Just (AnnCodeLoc f _ _) -> f) is dts cs (map (Pair '') ins) (foldl concat [] dfs)) <*>
  locP <*> many importP <*> some topLevelP

splitFourWay e = case (splitEither e) of
  Pair a b -> Pair (splitEither a) (splitEither b)

eitherP a b = Parser $ \s -> applyParser ((pure Left <*> a) <|> (pure Right <*> b)) s
topLevelDefsP = let
  addExportAnn d = case d of
    Pair n e -> Pair n (withAnn (setAnn 'export' (AnnExport n) (annOf e)) e)
  in pure (map addExportAnn) <*> defsP
topLevelP = eitherP (eitherP dataP topLevelDefsP) (eitherP classP instanceP)
  
parseModule = runParser moduleP
parseImports = runParser (many importP)
parseExpr = runParser exprP
parseType = runParser typeP
