import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {printType, printTypeBound, reallyPrintExpr, printDef} from '//compiler/printer.jg'
import {sccSorted} from '//compiler/graph.jg'
import {replaceSkolems, instanceMatches, checkEquiv, checkEquivM, instantiateBound} from '//compiler/typeutil.jg'
import * from '//compiler/ctx.jg'
import * from '//compiler/result.jg'

// data TypingResult = Result (Array Ctx, String) Unit

tOk = Ok Unit
tErr ctx m = Err (ctx, m)

checkMany f xs = foldl (\r x -> r >> f x) tOk xs

tnum = TConst emptyAnn 'Number'
tstr = TConst emptyAnn 'String'
tfun a b = TApp emptyAnn (TApp emptyAnn (TConst emptyAnn '->') a) b

data Scope = Scope (Map String Type) (Array Inst) (Map String Unit)

addBinding v t (Scope bs is sks) = Scope (insert v t bs) is sks
getBinding v (Scope bs _ _) = lookup v bs

addSkolems vs (Scope bs is sks) = Scope bs is (setAddAll vs sks)
allowedSkolem v (Scope _ _ sks) = setContains v sks

addInstances vs tbs (Scope bs is sks) = Scope bs (concat is (map (Inst vs) tbs)) sks
findInstances ctx b (Scope _ is _) = filter (instanceMatches ctx b) is

checkBound ctx scope b = let
  matchingInstances = findInstances ctx b scope
  in case (length matchingInstances) of
    0 -> tErr ctx ('no matching instances found (out of ' ++ intToString (length (case scope of (Scope _ ins _) -> ins)) ++ ')')
    1 -> tOk
    n -> tErr ctx ('too many matching instances found (' ++ intToString n ++ ')')

checkCanInstantiate ctx scope toType fromType =
  case fromType of
    TForall _ vs typeBounds t -> let
      bs = foldl (\bs v -> insert v TUnknown bs) Empty vs
      ctx2 = ctx << \_ -> TypeInstCtx fromType
      (reps, r) = runState bs (checkEquivM ctx2 toType t)
      in r >> checkMany (checkBound ctx scope) (map (instantiateBound reps) typeBounds)
    _ -> checkEquiv ctx toType fromType

checkAllowedSkolems ctx scope t = let
  check = checkAllowedSkolems ctx scope
  in case t of
    TSkolem _ n -> case (allowedSkolem n scope) of
      True -> tOk
      False -> tErr ctx ('unknown skolem ' ++ n)
    TApp _ a b -> check a >> check b
    TForall _ vs bs t -> let
      scope2 = addSkolems vs scope
      in checkMany (checkAllowedSkolems ctx scope2) (push t (map (\(TCBound _ _ t) -> t) bs))
    _ -> tOk

checkBindings ctx scope bs = let
  scope2 = foldl (\scope (n, e) -> addBinding n (getType e) scope) scope bs
  check (n, e) = checkExpr (ctx << \_ -> BindingCtx n) scope2 e
  in (scope2, checkMany check bs)

checkTopBindings ctx scope bs = snd (checkBindings ctx scope bs)

// ctx: contexts for error reporting
// scope: bindings, name -> type
// asks: allowed skolems, things that we generalize over
checkExpr ctx scope e = let
  ctx2 = ctx << \_ -> ExprCtx e
  err = tErr ctx2
  (et, scope2) = case (getType e) of
    TForall _ vs bs t -> (t, addInstances vs bs $ addSkolems vs scope)
    t -> (t, scope)
  check = checkExpr ctx2

  checkDataRef ctx scope consName dataType argTypes = let
    refType = foldr (\d t -> tfun t d) dataType argTypes
    in case (getBinding consName scope) of
      Just consType -> checkCanInstantiate ctx scope refType consType
      _ -> err 'unrecognized identifier'

  in checkAllowedSkolems ctx2 scope2 et >>= \_ ->
    case e of
      Var _ n ->  case (getBinding n scope2) of
        Nothing -> err 'unrecognized identifier'
        Just t -> checkCanInstantiate ctx2 scope2 et t
      Const _ (CNum _) -> checkEquiv ctx2 et tnum
      Const _ (CStr _) -> checkEquiv ctx2 et tstr
      App _ f a ->
        check scope2 f >> check scope2 a >> checkEquiv ctx2 (tfun (getType a) et) (getType f)
      Lam _ v e ->
        case et of
          TApp _ (TApp _ (TConst _ '->') ta) tb -> let
            scope3 = addBinding v ta scope2
            in check scope3 e >> checkEquiv ctx2 tb (getType e)
          _ -> err 'Lam expr with non-function type'
      New _ 'Array' es ->
        case et of
          TApp _ (TConst _ 'Array') t -> let
            checkElem e = checkEquiv ctx2 t (getType e) >> check scope2 e
            in checkMany checkElem es
          _ -> err 'New<Array> with non Array type'
      New _ d es ->
        checkMany (check scope2) es >> checkDataRef ctx2 scope2 d et (map getType es)
      Let _ bs e -> let
        (scope3, r) = checkBindings ctx2 scope2 bs
        in r >> check scope3 e

      // Checks to do:
      // 1. Check the expr
      // 2. Check top-level patterns against the expr type
      // 3. Check pattern consistency
      // 4. For each branch get bindings from pat and check
      //    branch expr, also against the return type
      Case _ e ps -> let
        caseType = et
        exprType = getType e
        topPats = map fst ps
        topPatTypes = map getPatType topPats

        // Checks type consistency between the pattern, sub-patterns
        // and referenced data type constructors.
        checkPat ctx p = let
          ctx2 = ctx << \_ -> PatCtx p
          patType = getPatType p
          in case p of
            PData _ d ps ->
              checkDataRef ctx2 scope2 d patType (map getPatType ps) >>
                checkMany (checkPat ctx2) ps
            PConst _ (CNum _) -> checkEquiv ctx2 tnum patType
            PConst _ (CStr _) -> checkEquiv ctx2 tstr patType
            PVar _ _ -> tOk

        // Checks specific case branch, in particular the branch expr
        // with pattern bindings and consistency of the branch expr type and
        // the overall case expr type.
        checkBranch (p, e) = let
          getBs scope p = case p of
            PVar _ v -> addBinding v (getPatType p) scope
            PData _ _ ps -> foldl getBs scope ps
            PConst _ _ -> scope
          scope3 = getBs scope2 p
          branchType = getType e
          in check scope3 e >> checkEquiv ctx2 caseType branchType

        in check scope2 e >>
          checkMany (checkEquiv ctx2 exprType) topPatTypes >>
            checkMany (checkPat ctx2) topPats >>
              checkMany checkBranch ps
