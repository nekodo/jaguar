import * from '//compiler/prelude.jg'

// parsers have type: a -> ParseResult b c or App (App -> a) (App (App ParseResult b) c)
// or type Parser i o x = i -> ParseResult x o

data ParseResult a s =
  Success a s
  | Error String

data Parser i a = Parser (i -> ParseResult a i)
applyParser p i = case p of
  Parser f -> f i

instance Functor (Parser i) where
  fmap f pa = case pa of
    Parser pa -> Parser (\i -> case (pa i) of
      Error e -> Error e
      Success a i -> Success (f a) i)

instance Applicative (Parser i) where
  pure x = Parser (Success x)
  (<*>) pf pa = case pf of
    Parser pf -> case pa of
      Parser pa -> Parser (\i -> case (pf i) of
        Error e -> Error e
        Success f i -> case (pa i) of
          Error e -> Error e
          Success a i -> Success (f a) i)

instance Alternative (Parser i) where
  zero = Parser (\_ -> Error 'parser failure')
  (<|>) pa pb = case pa of
    Parser pa -> case pb of
      Parser pb -> Parser (\i -> case (pa i) of
        Error _ -> pb i
        Success a i -> Success a i)

(|>) a b = pure (\_ b -> b) <*> a <*> b
(<|) a b = pure (\a _ -> a) <*> a <*> b

many p = let
  manyIterate s = let
    r = iterate
      (Left (Success emptyArray s))
      (\r -> case r of
        Left s -> False
        Right s -> True)
      (\rs -> case rs of Left (Success rs s) -> case (applyParser p s) of
        Success r s -> Left (Success (push r rs) s)
        Error e -> Right (Success rs s))
    in case r of
      Right a -> a
      Left _ -> error 'manyIterate should never return a Left'
  in Parser manyIterate

some p = pure enqueue <*>
  p <*> many p

success a = Parser (Success a)

sepBy1 p sp = pure enqueue <*>
  p <*> many (sp |> p)

opt a = (pure Just <*> a) <|> success Nothing

digits = '0123456789'
upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
letters = 'abcdefghijklmnopqrstuvwxyz' ++ upperCaseLetters
