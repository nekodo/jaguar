import * from '//compiler/prelude.jg'
import * from '//compiler/parsers.jg'
import * from '//compiler/ast.jg'
import {parseExpr, parseModule, parseType, ParserState} from '//compiler/jaguarParser.jg'
import {compileModule, combineModules} from '//compiler/js/backend.jg'
import {printType, reallyPrintExpr} from '//compiler/printer.jg'
import {newCtx, inferTypeModule, getTypedExports, generalize, emptyEnv} from '//compiler/typer.jg'
import {dfs} from '//compiler/graph.jg'
import {ArgBool, ArgString, parseArgs, getPositional, getString, getBool} from '//compiler/args.jg'
import {declassModule} from '//compiler/declasser.jg'
import {normalizeImports} from '//compiler/importNormalizer.jg'
import {uniquify} from '//compiler/uniquifier.jg'
import {mergeModules} from '//compiler/moduleMerger.jg'
import {inline} from '//compiler/inliner.jg'
import {translateAdts} from '//compiler/adt.jg'

compile s fn = case (parseModule s fn) of
  Success m (ParserState ts p li ri _) -> case (p == length ts) of
    True -> m
    False -> error ('failed to parse all tokens, stopped at ' ++ jsonStringify (getIx p ts)) 
  e -> error e

findImports m =
  let
    importFileName i = case i of
      ImportAll _ f -> f
      ImportOpen _ f ns -> f
      ImportClosed _ f n -> f
  in case m of
    Module _ _ is ds cs ins vs -> map importFileName is

parseT s = case (parseType s '') of
  Success t ps -> t
  e -> error e

parseExports e = let
  bs = mapRecord (\s -> evalState newCtx (generalize emptyEnv (parseT s))) e
  in ModuleInterface bs emptyArray emptyArray

instrument m = let
  instrumentDef d = case d of
    Pair n (Lam a p e) -> Pair n (instrumentExpr n (Lam a p e))
    _ -> d
  instrumentExpr n e = case e of
    Lam a p e -> Lam a p (instrumentExpr n e)
    _ -> let
      we = Lam emptyAnn '$unused$' e
      in App emptyAnn (App emptyAnn (Var emptyAnn 'perfTime') (Const emptyAnn (CStr n))) we
  addImport i = case i of
    ImportOpen ann './builtins.js' syms -> ImportOpen ann './builtins.js' (push (Pair 'perfTime' 'perfTime') syms)
    _ -> i
  in case m of
    Module ann fn is ds cs ins vs -> Module ann fn (map addImport is) ds cs ins (map instrumentDef vs)

builtinsPathArg = ArgString 'builtins' Nothing
outPathArg = ArgString 'out' Nothing
mainArg = ArgString 'main' Nothing
profileArg = ArgBool 'profile' (Just False)

argDefs = push builtinsPathArg (push outPathArg (push mainArg (push profileArg emptyArray)))

main argv = let
  // Read args.
  args = parseArgs argDefs (slice 2 argv)
  builtinsPath = getString args builtinsPathArg
  outPath = getString args outPathArg
  mainName = '//' ++ getString args mainArg
  srcFiles = getPositional args
  profile = getBool args profileArg
  
  // Load builtin exports from file.
  builtinsExports = loadJSExports builtinsPath
  
  // Compile all the srcs and construct a map of file -> imports.
  compiled = foldl (\ss s -> let n =  '//' ++ s in set n (compile (readFile s) n) ss) empty srcFiles
  imports = mapRecord findImports compiled
  
  // Run a depth-first search from the main file to determine the order of
  // compilation. Also means we'll ignore any extra files that are not needed.
  ordered = dfs imports emptyArray mainName
  
  // Type each modul, get its exports and transpile it to JS.
  exports = set './builtins.js' (parseExports builtinsExports) empty
  perModulePasses er ixn = case er of
    Pair exports result -> case ixn of
      Pair ix n -> let
        m = get n compiled
        normalized = uniquify ('_' ++ intToString ix ++ '_') exports (normalizeImports exports (translateAdts m))
        typed = inferTypeModule exports normalized
        e = getTypedExports typed
        declassed = declassModule exports typed
        in Pair (set n e exports) (push declassed result)
  modules = snd (foldr perModulePasses (Pair exports emptyArray) (zipWithIndex ordered))
  external = case (last modules) of Module _ _ _ ds _ _ bs -> concat (map fst bs) (concatMap dataConNames ds)
  merged = mergeModules modules
  optimized = inline external merged
  rawjs = case profile of
    True -> compileModule exports (instrument optimized)
    False -> compileModule exports optimized
  // Combine the JS modules into a single file and write it out.
  js = combineModules mainName builtinsPath (arr1 $ Pair mainName rawjs)
  in writeFile js outPath
