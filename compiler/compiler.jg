import * from '//compiler/prelude.jg'
import * from '//compiler/parsers.jg'
import * from '//compiler/ast.jg'
import {parseExpr, parseModule, parseType, ParserState} from '//compiler/jaguarParser.jg'
import {compileExpr, compileModule} from '//compiler/js/backend.jg'
import {printType, reallyPrintExpr} from '//compiler/printer.jg'
import {inferType, builtinTypes, newCtx, scc, inferTypeModule, getTypedExports, generalize} from '//compiler/typer.jg'

transpileExpr s = case (parseExpr s) of
  Success e ps -> compileExpr e
  e -> error e

compile s = case (parseModule s) of
  Success m (ParserState ts p li ri) -> case (p == length ts) of
    True -> m
    False -> error ('failed to parse all tokens, stopped at ' ++ jsonStringify (get p ts)) 
  e -> error e

transpileModule = compileModule

findImports m =
  let
    importFileName i = case i of
      ImportAll _ f -> f
      ImportOpen _ f ns -> f
      ImportClosed _ f n -> f
  in case m of
    Module _ is ds vs -> push ('./builtins.js') (map importFileName is)

findExports = getTypedExports

parseT s = case (parseType s) of
  Success t ps -> t
  e -> error e

parseExports = mapRecord (\s -> generalize empty empty (parseT s))

parseE s = case (parseExpr s) of
  Success e (ParserState ts p li ri) -> case (p == length ts) of
    True -> e
    False -> error ('failed to parse all tokens, stopped at ' ++ jsonStringify (get p ts))
  e -> error e

printT = printType
printE = reallyPrintExpr
inferT env e = inferType (merge builtinTypes env) newCtx e
mscc = scc
inferM = inferTypeModule
