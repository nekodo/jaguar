import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {Success, Error} from '//compiler/parsers.jg'
import {parseExpr, parseModule, parseType, ParserState} from '//compiler/jaguarParser.jg'
import {compileModule as generateJs} from '//compiler/js/backend.jg'
import {printType, reallyPrintExpr} from '//compiler/printer.jg'
import {newCtx, inferTypeModule, getTypedExports, generalize, skolemizeType, emptyEnv} from '//compiler/typer.jg'
import {dfs} from '//compiler/graph.jg'
import {ArgBool, ArgString, parseArgs, getPositional, getString, getBool} from '//compiler/args.jg'
import {declassModule} from '//compiler/declasser.jg'
import {normalizeImports} from '//compiler/importNormalizer.jg'
import {uniquify} from '//compiler/uniquifier.jg'
import {mergeModules} from '//compiler/moduleMerger.jg'
import {inline} from '//compiler/inliner.jg'
import {translateAdts} from '//compiler/adt.jg'
import * from '//compiler/pass.jg'
import {splitLetsPass} from '//compiler/let_splitter.jg'
import {liftModule} from '//compiler/lambdaLifter.jg'

moduleFile m = case m of
  Module _ n _ _ _ _ _ -> n

parse fn = case (parseModule (readFile fn) ('//' ++ fn)) of
  Success m (ParserState ts p li ri _) -> case (p == length ts) of
    True -> m
    False -> error (fn ++ ': failed to parse all tokens, stopped at ' ++ jsonStringify (getIx p ts)) 
  Error e -> error (fn ++ ': ' ++ e)

// Run a depth-first search from the main file to determine the order of
// compilation. Also means we'll ignore any extra files that are not needed.
depSort mainName ms = let
  modules = foldl (\r m -> insert (moduleFile m) m r) Empty ms
  imports = mapTrie (\_ -> findImports) modules
  ordered = dfs imports [] mainName
  in reverse $ map (\n -> fromJust $ lookup n modules) ordered

findImports m = let
  importFileName i = case i of
    ImportAll _ f -> f
    ImportOpen _ f ns -> f
    ImportClosed _ f n -> f
  in case m of
    Module _ _ is ds cs ins vs -> map importFileName is

parseT s = case (parseType s '') of
  Success t ps -> t
  e -> error e

parseExports e = let
  bs = mapRecord (\s -> skolemizeType $ evalState newCtx (generalize emptyEnv (parseT s))) e
  in ModuleInterface bs [] Empty

instrument m = let
  instrumentDef d = case d of
    Pair n (Lam a p e) -> Pair n (instrumentExpr n (Lam a p e))
    _ -> d
  instrumentExpr n e = case e of
    Lam a p e -> Lam a p (instrumentExpr n e)
    _ -> let
      we = Lam emptyAnn '$unused$' e
      in App emptyAnn (App emptyAnn (Var emptyAnn 'perfTime') (Const emptyAnn (CStr n))) we
  addImport i = case i of
    ImportOpen ann './builtins.js' syms -> ImportOpen ann './builtins.js' (push (Pair 'perfTime' 'perfTime') syms)
    _ -> i
  in case m of
    Module ann fn is ds cs ins vs -> Module ann fn (map addImport is) ds cs ins (map instrumentDef vs)

builtinsPathArg = ArgString 'builtins' Nothing
outPathArg = ArgString 'out' Nothing
mainArg = ArgString 'main' Nothing
profileArg = ArgBool 'profile' (Just False)
optArg = ArgBool 'opt' (Just False)

argDefs = [builtinsPathArg, outPathArg, mainArg, profileArg, optArg]

liftPass p a = ret (p a)

normalizeImportsPass m = getExports >>= \es ->
  ret (normalizeImports es m)

typerPass m = getExports >>= \es -> let
  typed = inferTypeModule es m
  e = getTypedExports typed
  in setExports (set (moduleFile m) e es) >> ret typed

declasserPass m = getExports >>= \es ->
  ret (declassModule es m)

instrumentPass profile m = case profile of
  False -> ret m
  True -> ret (instrument m)

main argv = let
  // Read args.
  args = parseArgs argDefs (slice 2 argv)
  builtinsPath = getString args builtinsPathArg
  outPath = getString args outPathArg
  mainName = '//' ++ getString args mainArg
  srcFiles = getPositional args
  profile = getBool args profileArg
  opt = getBool args optArg
  
  // Load builtin exports from file.
  baseExports = set './builtins.js' (parseExports (loadJSExports builtinsPath)) empty
  
  passes = perModule (timed 'parse' $ liftPass parse) >=>
           timed 'dep-sort' (liftPass (depSort mainName)) >=>
           perModule (
             // Normalization passes.
             timed 'translate-adts' (liftPass translateAdts) >=>
               timed 'normalize-imports' normalizeImportsPass >=>
               timed 'uniquify' uniquify >=>
               // timed 'split-lets' splitLetsPass >=>
               // Typing and type clas handling.
               timed 'typer' typerPass >=>
               timed 'declasser' declasserPass) >=>
               //timed 'lambda-lifter' liftModule) >=>
           // Optimization passes.
           timed 'merge-modules' (liftPass mergeModules) >=>
           timed 'opt' (inline opt) >=>
           // Code generation.
           timed 'instrument' (instrumentPass profile) >=>
           timed 'generate-js' (liftPass (generateJs builtinsPath)) >=>
           reportTimes
  
  js = evalState (CompilerState baseExports 0 Empty) (passes srcFiles)
  in writeFile js outPath
