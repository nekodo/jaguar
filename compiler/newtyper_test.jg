import * from '//compiler/prelude.jg'
import {assertTrue, assertEq, runTests, Test, withMsg, changeMsg, prefixMsg, Ok, Fail} from '//compiler/test/test.jg'
import * from '//compiler/newtyper.jg'
import * from '//compiler/ast.jg'
import {printType} from '//compiler/printer.jg'
import {parseModule, parseExpr, parseType} from '//compiler/jaguarParser.jg'
import {Success, Error} from '//compiler/parsers.jg'

mustParseExpr testName s = case (parseExpr s testName) of
  Error e -> error e
  Success e _ -> e

mustParseModule testName s = case (parseModule s testName) of
  Error e -> error e
  Success m _ -> m

assertIOk r = case r of
  IOk _ -> Ok
  IErr _ m -> Fail ('want IOk, but got IErr: ' ++ jsonStringify r)

assertIFail r = case r of
  IOk _ -> Fail ('want TFail, but got TOk')
  IErr _ m -> Ok

assertIOkAnd a f = case a of
  IOk a -> f a
  IErr _ m -> Fail ('want IOk, but got IErr: ' ++ jsonStringify a)

typeEq a b =
  case (a, b) of
    (TVar _ v, TVar _ w) -> v == w
    (TConst _ a, TConst _ b) -> a == b
    (TSkolem _ a, TSkolem _ b) -> a == b
    (TApp _ fa xa, TApp _ fb xb) -> typeEq fa fb && typeEq xa xb
    (TForall _ vsa _ ta, TForall _ vsb _ tb) ->
      foldl (\r (v, w) -> r && (v == w)) (typeEq ta tb) (zip vsa vsb)
    _ -> False

assertTypeEq want got =
  case (typeEq want got) of
    True -> Ok
    False -> Fail ('want ' ++ printType want ++ ', but got ' ++ printType got)

assertTypeMapEq want got = let
  assertEntry r k wantType =
    case r of
      Ok -> case (lookup k got) of
        Nothing -> Fail ('want key ' ++ k ++ ', but did not find it')
        Just gotType -> prefixMsg ('var ' ++ k) $ assertTypeEq wantType gotType
      f -> f
  sizeCheck = withMsg ('want map of size ' ++ intToString (size want) ++ ', but got ' ++ intToString (size got)) $ assertEq (size want) (size got)
  in foldTrie assertEntry sizeCheck want

tc = TConst emptyAnn
tv = TVar emptyAnn
ts = TSkolem emptyAnn
tapp = TApp emptyAnn
tforall vs = TForall emptyAnn vs []

ant t = setAnnType t emptyAnn

tests = [
    Test 'forceType (Number)' $ \_ -> let
      vars = Empty
      t = tnum

      want = tnum

      got = evalState (US vars 0) (forceType t)
      in [assertTypeEq want got]
  ]

main argv = runTests 'newtyper_test' tests
