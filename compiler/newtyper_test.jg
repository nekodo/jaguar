import * from '//compiler/prelude.jg'
import {assertTrue, assertEq, runTests, Test, withMsg, changeMsg, prefixMsg, testOk, testFail} from '//compiler/test/test.jg'
import * from '//compiler/newtyper.jg'
import * from '//compiler/ast.jg'
import {printType} from '//compiler/printer.jg'
import {parseModule, parseExpr, parseType, parseScope} from '//compiler/jaguarParser.jg'
import {Success, Error} from '//compiler/parsers.jg'
import {checkTopBindings, Scope} from '//compiler/typechecker.jg'
import {normalizeForall, wrapForall} from '//compiler/typeutil.jg'
import {Ok, Err} from '//compiler/result.jg'
import {printCtx, emptyCtx} from '//compiler/ctx.jg'

mustParseExpr s = case (parseExpr s 'test') of
  Error e -> error e
  Success e _ -> e

mustParseModule s = case (parseModule s 'test') of
  Error e -> error e
  Success m _ -> m

mustParseScope s =
  case (parseScope s 'test') of
    Error e -> error e
    Success bs _ -> foldl (\s (n, t) -> insert n (wrapForall t) s) Empty bs

mustParseBindings s = case (mustParseModule s) of
  Module _ _ _ _ _ _ bs -> bs

assertOk r = case r of
  Ok _ -> testOk
  e -> testFail ('want Ok, but got Err:\n' ++ printErr e)

assertErr r = case r of
  Ok _ -> testFail ('want Err, but got Ok')
  Err _ -> testOk

assertOkAnd a f = case a of
  Ok a -> f a
  e -> testFail ('want Ok, but got Err:\n' ++ printErr e)

typeEq a b =
  case (a, b) of
    (TVar _ v, TVar _ w) -> v == w
    (TConst _ a, TConst _ b) -> a == b
    (TSkolem _ a, TSkolem _ b) -> a == b
    (TApp _ fa xa, TApp _ fb xb) -> typeEq fa fb && typeEq xa xb
    (TForall _ _ _ _, TForall _ _ _ _) -> forallEquiv (normalizeForall a) (normalizeForall b)
    _ -> False

forallEquiv (TForall _ vsa bsa a) (TForall _ vsb bsb b) = let
  reps = insertAll (zip vsa vsb) Empty
  equivT a b =
    case (a, b) of
      (TVar _ v, TVar _ w) -> v == w
      (TConst _ a, TConst _ b) -> a == b
      (TSkolem _ a, TSkolem _ b) -> case (lookup a reps) of
        Nothing -> a == b
        Just r -> r == b
      (TApp _ fa xa, TApp _ fb xb) -> equivT fa fb && equivT xa xb
      _ -> False
  equivB (TCBound _ n a) (TCBound _ m b) = (n == m) && equivT a b
  in (length vsa == length vsb) && equivT a b && all (\(a, b) -> equivB a b) (zip bsa bsb)

assertTypeEq want got =
  case (typeEq want got) of
    True -> testOk
    False -> testFail ('want ' ++ printType want ++ ', but got ' ++ printType got)

assertTypeMapEq want got = let
  assertEntry r k wantType = r >>= \_ ->
    case (lookup k got) of
      Nothing -> testFail ('want key ' ++ k ++ ', but did not find it')
      Just gotType -> prefixMsg ('var ' ++ k) $ assertTypeEq wantType gotType
  sizeCheck = withMsg ('want map of size ' ++ intToString (size want) ++ ', but got ' ++ intToString (size got)) $ assertEq (size want) (size got)
  in foldTrie assertEntry sizeCheck want

bsToScope = foldl (\m (n, e) -> insert n (getType e) m) Empty
assertInferredTypes want got = assertOkAnd got (\got -> assertTypeMapEq want (bsToScope got))

assertTypecheckOk scope ins got =
  assertOkAnd got (\got -> assertOk (checkTopBindings emptyCtx (Scope scope ins Empty) got))

tc = TConst emptyAnn
tv = TVar emptyAnn
ts = TSkolem emptyAnn
tapp = TApp emptyAnn
tforall vs = TForall emptyAnn vs []

ant t = setAnnType t emptyAnn

tests = [
    Test 'forceType (Number)' $ \_ -> let
      vars = Empty
      t = tnum

      want = tnum

      got = evalState (US Empty vars 0 []) (forceType t)
      in [assertTypeEq want got],

    Test 'forceType (check shorting)' $ \_ -> let
      vars = insert 'a' (tv 'b') (insert 'b' (tv 'c') Empty)
      t = tv 'a'

      wantT = tv 'c'
      wantVars = insert 'a' (tv 'c') (insert 'b' (tv 'c') Empty)

      (US _ gotVars _ _, gotT) = runState (US Empty vars 0 []) (forceType t)
      in [
        prefixMsg 'type' $ assertTypeEq wantT gotT,
        prefixMsg 'vars' $ assertTypeMapEq wantVars gotVars],

    Test 'forceType (check shorting and TApp)' $ \_ -> let
      vars = insert 'a' (tapp (tv 'b') (tv 'c')) (insert 'b' (tc 'Maybe') Empty)
      t = tv 'a'

      wantT = tapp (tv 'b') (tv 'c') // note tha b did not get forced
      wantVars = vars // unchanged

      (US _ gotVars _ _, gotT) = runState (US Empty vars 0 []) (forceType t)
      in [
        prefixMsg 'type' $ assertTypeEq wantT gotT,
        prefixMsg 'vars' $ assertTypeMapEq wantVars gotVars],

    Test 'unifyType (pick tvar to keep)' $ \_ -> let
      ctx = emptyCtx
      vars = Empty
      
      a = tv '$1'
      b = tv '$11'

      wantT = tv '$1'
      wantVars = insert '$11' (tv '$1') Empty

      (US _ gotVars _ _, gotT) = runState (US Empty vars 0 []) (unifyType ctx a b)
      in [
        prefixMsg 'type' $ assertOkAnd gotT (assertTypeEq wantT),
        prefixMsg 'vars' $ assertTypeMapEq wantVars gotVars],

    Test 'unifyType (Strings keep spreading)' $ \_ -> let
      ctx = emptyCtx
      vars = insert 'a' (tv 'x') (insert 'b' (tv 'x') Empty)
      
      a = tfun (tv 'a') (tv 'b')
      b = tfun tstr (tv 'x')

      wantT = tfun tstr tstr
      wantVars = insert 'a' (tv 'x') (insert 'b' (tv 'x') (insert 'x' tstr Empty))
      wantA = tstr

      (US _ gotVars _ _, gotT) = runState (US Empty vars 0 []) (unifyType ctx a b)
      gotA = evalState (US Empty gotVars 0 []) (forceType (tv 'a'))
      in [
        prefixMsg 'type' $ assertOkAnd gotT (assertTypeEq wantT),
        prefixMsg 'vars' $ assertTypeMapEq wantVars gotVars,
        prefixMsg 'forced a' $ assertTypeEq wantA gotA],

    Test 'unifyType (mismatch in TApp)' $ \_ -> let
      ctx = emptyCtx
      vars = insert 'a' (tv 'x') (insert 'b' (tv 'x') Empty)
      
      a = tfun (tv 'a') (tv 'b')
      b = tfun tstr tnum

      got = evalState (US Empty vars 0 []) (unifyType ctx a b)
      in [assertErr got],

    Test 'generalize' $ \_ -> let
      vars = insert 'a' (tfun (tv 'b') (tv 'x')) (insert 'b' (tv 'x') Empty)
      t = tv 'a'

      wantT = tforall ['x'] (tfun (ts 'x') (ts 'x'))
      wantVars = vars

      (US _ gotVars _ _, (_, gotT)) = runState (US Empty vars 0 []) (generalize [] t)
      in [
        prefixMsg 'type' $ assertTypeEq wantT gotT,
        prefixMsg 'vars' $ assertTypeMapEq wantVars gotVars],

    Test 'infer simple' $ \_ -> let
      ctx = emptyCtx
      scope = insertAll [
        ('id', tforall ['x'] (tfun (ts 'x') (ts 'x')))
        ] Empty

      want = insertAll [
        ('x', tstr)
        ] Empty

      bs = [
        ('x', App emptyAnn (Var emptyAnn 'id') (Const emptyAnn (CStr 'pony')))
        ]
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer simple with parsed data' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        id :: a -> a
      '

      want = mustParseScope '
        x :: String
      '

      bs = mustParseBindings '
        x = id "pony"
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer fib' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        sub :: Number -> Number -> Number
        add :: Number -> Number -> Number
      '

      want = mustParseScope '
        fib :: Number -> Number
      '

      bs = mustParseBindings '
        fib n = case n of
          0 -> 1
          1 -> 1
          _ -> add (fib (sub n 1)) (fib (sub n 2))
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer fib mutually recursive' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        sub :: Number -> Number -> Number
        add :: Number -> Number -> Number
      '

      want = mustParseScope '
        fib :: Number -> Number
        fib2 :: Number -> Number
      '

      bs = mustParseBindings '
        fib n = case n of
          0 -> 1
          1 -> 1
          _ -> add (fib2 (sub n 1)) (fib (sub n 2))
        
        fib2 n = case n of
          0 -> 1
          1 -> 1
          _ -> add (fib (sub n 1)) (fib2 (sub n 2))
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'polymorphic let binding' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        Pair :: a -> b -> Pair a b
      '

      want = mustParseScope '
        x :: Pair Number String
      '

      bs = mustParseBindings '
        x = let
          id z = z
          in (id 7, id "pony")
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer array' $ \_ -> let
      ctx = emptyCtx
      scope = Empty

      want = mustParseScope '
        x :: Array Number
        y :: Number
      '

      bs = mustParseBindings '
        y = 13
        x = [42, y]
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer map based on fold' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        foldl :: (b -> a -> b) -> b -> Array a -> b
        push :: a -> Array a -> Array a
      '

      want = mustParseScope '
        map :: (a -> b) -> Array a -> Array b
      '

      bs = mustParseBindings '
        map f xs = foldl (\\rs x -> push (f x) rs) [] xs
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer recursive fold impl' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        length :: Array a -> Number
        head :: Array a -> a
        tail :: Array a -> Array a
      '

      want = mustParseScope '
        foldl :: (b -> a -> b) -> b -> Array a -> b
      '

      bs = mustParseBindings '
        foldl f b xs = case (length xs) of
          0 -> b
          _ -> foldl f (f b (head xs)) (tail xs)
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer mutually recursive fold impl' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        length :: Array a -> Number
        head :: Array a -> a
        tail :: Array a -> Array a
      '

      want = mustParseScope '
        foldl :: (b -> a -> b) -> b -> Array a -> b
        foldl2 :: (b -> a -> b) -> b -> Array a -> b
      '

      bs = mustParseBindings '
        foldl f b xs = case (length xs) of
          0 -> b
          _ -> foldl2 f (f b (head xs)) (tail xs)
        foldl2 f b xs = case (length xs) of
          0 -> b
          _ -> foldl f (f b (head xs)) (tail xs)
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer polymorphic data types' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        Just :: a -> Maybe a
        Nothing :: Maybe a
      '

      want = mustParseScope '
        mapJust :: (a -> b) -> Maybe a -> Maybe b
        bindJust :: (a -> Maybe b) -> Maybe a -> Maybe b
      '

      bs = mustParseBindings '
        mapJust f m = case m of
          Just x -> Just (f x)
          Nothing -> Nothing

        bindJust f m = case m of
          Just x -> f x
          Nothing -> Nothing 
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer type classes' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        fmap :: (Functor f) => (a -> b) -> f a -> f b
        show :: (Show a) => a -> String
      '

      want = mustParseScope '
        foo :: (Show a, Functor f) => f a -> f String
      '

      bs = mustParseBindings '
        foo x = fmap show x
      '
      got = inferTopBindings ctx scope [] bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope [] got],

    Test 'infer type classes (instances from scope)' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        fmap :: (Functor f) => (a -> b) -> f a -> f b
        read :: (Read a) => String -> a
        x :: Maybe String
      '
      ins = [
          Inst [] (TCBound emptyAnn 'Functor' (tc 'Maybe'))
        ]

      want = mustParseScope '
        foo :: (Read a) => Maybe a
      '

      bs = mustParseBindings '
        foo = fmap read x
      '
      got = inferTopBindings ctx scope ins bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope ins got],

    Test 'infer with explicit type' $ \_ -> let
      ctx = emptyCtx
      scope = Empty
      ins = []

      want = mustParseScope '
        foo :: String -> String
        bar :: (Read x) => x -> x
      '

      bs = mustParseBindings '
        foo x :: String -> String = x
        bar x :: (Read a) => a -> a = x
      '
      got = inferTopBindings ctx scope ins bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope ins got],

    Test 'infer find' $ \_ -> let
      ctx = emptyCtx
      scope = mustParseScope '
        length :: Array a -> Number
        getIx :: Number -> Array a -> a
        Nothing :: Maybe a
        Just :: a -> Maybe a
        (<) :: Number -> Number -> Bool
        True :: Bool
        False :: Bool
        (+) :: Number -> Number -> Number
      '
      ins = []

      want = mustParseScope '
        find :: (a -> Bool) -> Array a -> Maybe a
      '

      bs = mustParseBindings '
        find predicate xs = let
          f i = case (i < length xs) of
            False -> Nothing
            True -> case (predicate (getIx i xs)) of
              True -> Just (getIx i xs)
              False -> f (i + 1)
          in f 0
      '
      got = inferTopBindings ctx scope ins bs
      in [
        prefixMsg 'types' $ assertInferredTypes want got,
        prefixMsg 'full check' $ assertTypecheckOk scope ins got]
  ]

main argv = runTests 'newtyper_test' tests

