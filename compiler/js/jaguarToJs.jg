import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import * from '//compiler/js/ast.jg'

jaguarExprToJsExpr = \e -> case e of
  Var _ 'True' -> JSBool True
  Var _ 'False' -> JSBool False
  Var _ v -> JSRef v
  Const _ (CNum n) -> JSNum n
  Const _ (CStr s) -> JSString s
  App _ f a -> JSCall (jaguarExprToJsExpr f) (arr1 (jaguarExprToJsExpr a))
  Lam _ p e -> JSFun (arr1 p) (arr1 (JSReturn (jaguarExprToJsExpr e)))
  Case _ e ps -> JSCall
    (JSFun
      emptyArray
      (arr2
        (JSVar '$pm' (jaguarExprToJsExpr e))
        (JSReturn (foldr
          assemblePatternMatch
          (JSCall (JSRef 'error') (arr1 (JSString 'pattern match fail')))
          ps))))
    emptyArray
  Let _ ds e-> JSCall
    (JSFun
      emptyArray
      (push
        (JSReturn (jaguarExprToJsExpr e))
        (map defToJs ds)))
    emptyArray

assemblePatternMatch = \alt p -> case p of
  Pair pat e -> case (processPattern (JSRef '$pm') pat) of
    Pair f (Pair ns vs) ->
      JSTernary
        f
        (JSCall (JSFun ns (arr1 (JSReturn (jaguarExprToJsExpr e)))) vs)
        alt

processPattern = \pm p -> case p of
  PVar _ v -> Pair (JSBool True) (Pair (arr1 v) (arr1 pm))
  PConst _ (CNum n) -> Pair
    (JSBinOp '==' (JSNum n) pm)
    (Pair emptyArray emptyArray)
  PConst _ (CStr s) -> Pair
    (JSBinOp '==' (JSString s) pm)
    (Pair emptyArray emptyArray)
  PData _ 'True' ps -> Pair pm (Pair emptyArray emptyArray)
  PData _ 'False' ps -> Pair (JSUnOp '!' pm) (Pair emptyArray emptyArray)
  PData _ t ps -> 
    foldl
      (\a b -> case a of
        Pair fa (Pair na va) -> case b of
          Pair fb (Pair nb vb) ->
            Pair (JSBinOp '&&' fa fb) (Pair (concat na nb) (concat va vb)))
      (Pair (JSBinOp '==' (JSIndex pm (JSString '$tag')) (JSIndex (JSRef t) (JSString '$tag'))) (Pair emptyArray emptyArray))
      (map
        (\p -> case p of
          Pair n pat ->
            processPattern (JSIndex pm (JSString ('$' ++ intToString n))) pat)
        (zipWithIndex ps))
  z -> error 'failure to match pattern during processing'

defToJs = \p -> case p of
  Pair n e -> JSVar n (jaguarExprToJsExpr e)

requireExpr = \f -> JSCall (JSRef '_require') (arr1 (JSString f))

buildImports = \f ns ->
  map (\n -> let n2 = opName n in JSVar n2 (JSIndex (requireExpr f) (JSString n2))) ns

importToJs = \importSymbols freeVars i -> case i of
  ImportClosed _ f n -> case (contains n freeVars) of
    True -> arr1 (JSVar n (requireExpr f))
    False -> emptyArray
  ImportOpen _ f ns -> buildImports f (filter (\n -> contains n freeVars) ns)
  ImportAll _ f -> buildImports f (filter (\n -> contains n freeVars) (keys (get f importSymbols)))

dataConFieldIds = \ts ->
  map (\p -> '$' ++ intToString (fst p)) (zipWithIndex ts)

dataConToJs = \dc -> case dc of
  DataCon _ n ts -> arr3
    (JSVar ('$' + n) (JSFun (dataConFieldIds ts) (push (JSExpr (JSBinOp '=' (JSIndex (JSRef 'this') (JSString '$tag')) (JSString n))) (map (\f -> JSExpr (JSBinOp '=' (JSIndex (JSRef 'this') (JSString f)) (JSRef f))) (dataConFieldIds ts)))))
    (JSVar n (foldr (\b f -> JSFun (arr1 f) (arr1 (JSReturn b))) (JSNew (JSRef ('$' + n)) (map JSRef (dataConFieldIds ts))) (dataConFieldIds ts)))
    (JSAssign (JSIndex (JSRef n) (JSString '$tag')) (JSString n))

dataToJs = \d -> case d of
  Data _ n ps cs -> concatMap dataConToJs cs

exportObject = \m -> JSObject (map (\n -> Pair n (JSRef n)) (getExports m))

moduleToJs = \importSymbols m -> push (JSVar 'exports' (exportObject m)) (case m of
  Module _ is ds vs ->
    concat
      (concatMap (importToJs importSymbols (freeVarsInModule m)) (enqueue (ImportAll emptyAnn './builtins.js') is))
      (concat
        (concatMap dataToJs ds)
        (map defToJs vs)))

opName = \op -> case op of
  '+' -> '$add'
  '-' -> '$del'
  '*' -> '$mul'
  '<' -> '$lt'
  '>' -> '$gt'
  '==' -> '$eq'
  '/=' -> '$neq'
  '&&' -> '$and'
  '||' -> '$or'
  '++' -> '$concat'
  nonOp -> nonOp

freeVarsInModule = \m -> case m of
  Module _ is ds vs -> foldl mergeSet emptyArray (map (\p -> freeVarsInExpr (snd p)) vs)

freeVarsInExpr = \e -> case e of
  Var _ v -> arr1 v
  Const _ c -> emptyArray
  App _ f x -> mergeSet (freeVarsInExpr f) (freeVarsInExpr x)
  Lam _ p b -> filter (\v -> v /= p) (freeVarsInExpr b)
  Case _ e ps -> foldl mergeSet (freeVarsInExpr e) (map freeVarsInPat ps)
  Let _ ds e -> filter (\v -> not (contains v (map fst ds))) (foldl mergeSet (freeVarsInExpr e) (map (\d -> freeVarsInExpr (snd d)) ds))

freeVarsInPat = \p -> case p of
  Pair pat e ->
    mergeSet
      (filter (\v -> not (contains v (namesInPat pat))) (freeVarsInExpr e))
      (freeVarsInPData pat)

freeVarsInPData = \p -> case p of
  PData _ n ps -> foldl mergeSet (arr1 n) (map freeVarsInPData ps)
  p -> emptyArray

namesInPat = \p -> case p of
  PVar _ v -> arr1 v
  PConst _ c -> emptyArray
  PData _ n ps -> foldl mergeSet emptyArray (map namesInPat ps)
