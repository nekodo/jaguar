import * from '//compiler/prelude.jg'
import * from '//compiler/js/ast.jg'

jsExprToString = \e -> case e of
  JSNull -> 'null'
  JSUndefined -> 'undefined'
  JSBool (True) -> 'true'
  JSBool (False) -> 'false'
  JSNum n -> jsonStringify n
  JSString s -> jsonStringify s
  JSRef '+' -> '$add'
  JSRef '-' -> '$del'
  JSRef '*' -> '$mul'
  JSRef '<' -> '$lt'
  JSRef '>' -> '$gt'
  JSRef '==' -> '$eq'
  JSRef '/=' -> '$neq'
  JSRef '&&' -> '$and'
  JSRef '||' -> '$or'
  JSRef '++' -> '$concat'
  JSRef v -> v
  JSIndex xs (JSString i) -> case (match '^[a-zA-Z_$][a-zA-Z0-9_$]*$' i) of
    '' -> jsExprToParenString xs ++ '[' ++ jsExprToString i ++ ']'
    i -> jsExprToParenString xs ++ '.' ++ i
  JSIndex xs i -> jsExprToParenString xs ++ '[' ++ jsExprToString i ++ ']'
  JSUnOp op e -> op ++ jsExprToParenString e
  JSBinOp op a b -> jsExprToParenString a ++ op ++ jsExprToParenString b
  JSCall f xs -> jsExprToParenString f
    ++ paren (intercalate ',' (map jsExprToString xs))
  JSNew c xs -> 'new ' ++ jsExprToParenString c
    ++ paren (intercalate ',' (map jsExprToString xs))
  JSFun ps bs -> 'function(' ++ intercalate ',' ps ++ '){\n'
    ++ (intercalate ';' (map jsStmtToString bs)) ++ '}'
  JSTernary b x y -> jsExprToParenString b ++ '?'
    ++ jsExprToParenString x ++ ':'
    ++ jsExprToParenString y
  JSObject kvs -> '{' ++ intercalate ',' (map keyValueToString kvs) ++ '}'
  JSInstanceOf x c -> jsExprToParenString x ++ ' instanceof '
    ++ jsExprToParenString c
  e -> error e

jsExprToParenString = \e -> case e of
  JSRef r -> jsExprToString e
  JSNum n -> jsExprToString e
  JSString s -> jsExprToString e
  JSBool b -> jsExprToString e
  JSIndex xs i -> jsExprToString e
  JSNew c xs -> jsExprToString e
  JSObject kvs -> jsExprToString e
  e -> paren (jsExprToString e)

keyValueToString = \kv -> case kv of
  Pair k v -> k ++ ':' ++ jsExprToString v

jsStmtToString = \s -> case s of
  JSExpr e -> jsExprToString e
  JSReturn e -> 'return ' ++ jsExprToString e
  JSVar v e -> 'var ' ++ v ++ ' = ' ++ jsExprToString e
  JSBreak -> 'break'
  JSSwitch e cs -> 'switch' ++ paren (jsExprToString e) ++ '{'
    ++ intercalate ';\n' (map caseToString cs) ++ '}'
  JSAssign l r -> jsExprToParenString l ++ ' = ' ++ jsExprToParenString r

caseToString = \c -> case c of
  Pair m ss -> 'case ' ++ paren (jsExprToString m) ++ ':\n  '
    ++ intercalate ';' (map jsStmtToString ss)

paren = \s -> '(' ++ s ++ ')'
