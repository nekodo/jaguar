import * from '//compiler/prelude.jg'
import {moduleToJs} from '//compiler/js/jaguarToJs.jg'
import {jsExprToString, jsStmtToString} from '//compiler/js/printer.jg'
import {rewriteStmt} from '//compiler/js/deadCode.jg'

compileModule builtinsPath m = let
  fullBuiltins = readFile builtinsPath
  wrappedBuiltins =
    'const $$builtins = (function() {\n const module = {};\n' ++
      (fullBuiltins) ++
        ';\n return builtins})();\n'
  js = join
    (map (jsStmtToString 0)
      (concatMap rewriteStmt (moduleToJs m)))
    ';\n'
  wrapModule m =
    '(function() {' ++ js ++ '\nmodule.exports = exports;})();'
  requireFun =
      'function _require(f) {\n' ++
        '  return f == "./builtins.js" ? $$builtins : require(f);\n' ++
          '}\n'
  runStmt = 'if (module.exports.main)module.exports.main(process.argv)'
  in wrappedBuiltins ++ requireFun ++ wrapModule m ++ runStmt
