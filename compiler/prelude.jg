data Unit = Unit
($) f a = f a

class Eq a where
  (==) :: a -> a -> Bool

(/=) a b = not (a == b)

instance Eq Number where
  (==) = jsEq

instance Eq String where
  (==) = jsEq

class Ord a where
  (<) :: a -> a -> Bool

(>) a b = b < a
(<=) a b = not (b < a)
(>=) a b = not (a < b)

instance Ord Number where
  (<) = jsLt

instance Ord String where
  (<) = jsLt

class Functor f where
  fmap :: (a -> b) -> f a -> f b

class Applicative a where
  pure :: x -> a x
  (<*>) :: a (x -> y) -> a x -> a y

class Alternative f where
  zero :: f a
  (<|>) :: f a -> f a -> f a

class Monad m where
  ret :: a -> m a
  (>>=) :: m a -> (a -> m b) -> m b

(>>) a b = a >>= \_ -> b

class Semigroup a where
  (<>) :: a -> a -> a

instance Semigroup (Array a) where
  (<>) = concat

instance Semigroup String where
  (<>) = (++)

class Monoid a where
  mzero :: a

instance Monoid (Array a) where
  mzero = []

instance Monoid String where
  mzero = ''

mconcat = foldl (<>) mzero

data Maybe a = Just a | Nothing

instance Functor Maybe where
  fmap f m = case m of
    Just x -> Just (f x)
    Nothing -> Nothing

instance Applicative Maybe where
  pure x = Just x
  (<*>) f x = case f of
    Nothing -> Nothing
    Just f -> fmap f x

instance Alternative Maybe where
  zero = Nothing
  (<|>) a b = case a of
    Nothing -> b
    _ -> a

instance Monad Maybe where
  ret = pure
  (>>=) a f = case a of
    Nothing -> Nothing
    Just a -> f a

maybe = \a b m -> case m of
  Just x -> a x
  Nothing -> b

justOr d m = case m of
  Just x -> x
  Nothing -> d

fromJust m = case m of
  Just x -> x
  Nothing -> error 'expected Just but got Nothing'

isJust m = case m of
  Just _ -> True
  Nothing -> False

data Pair a b = Pair a b

fst = \p -> case p of Pair a b -> a
snd = \p -> case p of Pair a b -> b

data Tuple3 a b c = Tuple3 a b c
data Tuple4 a b c d = Tuple4 a b c d
data Tuple5 a b c d e = Tuple5 a b c d e
data Tuple6 a b c d e f = Tuple6 a b c d e f

data Either a b = Left a | Right b

instance Functor (Either a) where
  fmap f e = case e of
    Left l -> Left l
    Right r -> Right (f r)

either = \f g e -> case e of
  Left a -> f a
  Right b -> g b

// Array (Either a b) -> Pair (Array a) (Array b)
splitEither = \a -> Pair
  (map (\e -> case e of Left a -> a) (filter (either (\_ -> True) (\_ -> False)) a))
  (map (\e -> case e of Right b -> b) (filter (either (\_ -> False) (\_ -> True)) a))

not b = case b of
  True -> False
  False -> True

contains x xs = let
  f i = case (i < length xs) of
    False -> False
    True -> case (x == getIx i xs) of
      True -> True
      False -> f (i + 1)
  in f 0

find predicate xs :: (a -> Bool) -> Array a -> Maybe a = let
  f i = case (i < length xs) of
    False -> Nothing
    True -> case (predicate (getIx i xs)) of
      True -> Just (getIx i xs)
      False -> f (i + 1)
  in f 0

mapIx f ix xs = setIx ix (f (getIx ix xs)) xs

containsChar x xs = let
  f i = case (i < length xs) of
    False -> False
    True -> case (getChar i xs == x) of
      True -> True
      False -> f (i + 1)
  in f 0

exists f xs = foldl (\r x -> f x || r) False xs
all f xs = foldl (\r x -> f x && r) True xs

join xs s = case (length xs) of
  0 -> ''
  n -> foldl1 (\a b -> a ++ s ++ b) xs

repeat s n = case (n < 1) of
  True -> ''
  False -> s ++ repeat s (n - 1) 

zipWithIndex xs = let
  f rs i = case (i < length xs) of
    False -> rs
    True -> f (push (i, getIx i xs) rs) (i + 1)
  in f [] 0

zip xs ys = let
  f rs i =
    case ((i < length xs) && (i < length ys)) of
      True -> f (push (getIx i xs, getIx i ys) rs) (i + 1)
      False -> rs
  in f [] 0

concatMap f a = mconcat (map f a)

mapJust f xs = let
  g r x = case (f x) of
    Nothing -> r
    Just x -> push x r
  in foldl g [] xs

head = getIx 0
tail = slice 1
last l = getIx (length l - 1) l
init l = slice2 0 (length l - 1) l

mergeSet = \xs ys -> case (length xs) of
  0 -> ys
  lx -> case (length ys) of
    0 -> xs
    ly -> case (head xs < head ys) of
      True -> enqueue (head xs) (mergeSet (tail xs) ys)
      False -> case (head xs == head ys) of
        True -> enqueue(head xs) (mergeSet (tail xs) (tail ys))
        False -> enqueue (head ys) (mergeSet xs (tail ys))

uniq xs = case (length xs < 2) of
  True -> xs
  False -> case (getIx 0 xs == getIx 1 xs) of
    False -> enqueue (head xs) (uniq (tail xs))
    True -> uniq (tail xs)

reverse = foldl (\xs x -> enqueue x xs) []

dedup xs = let //:: (Eq a) => Array a -> Array a = let
  f xs x = case (last xs == x) of
    True -> xs
    False -> push x xs
  in case (length xs) of
    0 -> xs
    1 -> xs
    _ -> foldl f [head xs] (tail xs)

toRecord = foldl (\r (k, v) -> set k v r) empty

strToArray s = let
  f rs i = case (i < length s) of
    False -> rs
    True -> f (push (getChar i s) rs) (i + 1)
  in f [] 0

foldM f r xs = foldl (\r x -> r >>= \r -> f r x) (ret r) xs

mapM f xs = foldM (\xs x -> f x >>= \x -> ret (push x xs)) [] xs
forM xs f = mapM f xs

data State s a = State (s -> Pair s a)

instance Functor (State s) where
  fmap f (State sf) = State (\s -> case (sf s) of (s, a) -> (s, f a))

instance Applicative (State s) where
  pure a = State (\s -> (s, a))
  (<*>) (State sf) (State sa) =
    State (\s -> case (sf s) of (s, f) -> case (sa s) of (s, a) -> (s, f a))

instance Monad (State s) where
  ret = pure
  (>>=) (State sa) f =
    State (\s -> case (sa s) of (s, a) -> case (f a) of State sb -> sb s)

gets = State (\s -> Pair s s)
sets s = State (\_ -> Pair s Unit)

runState s m = case m of State f -> f s
evalState s m = snd (runState s m)


class Hashable a where
  hashCode :: a -> Number

// TODO(kuro): This is a pretty bad hash impl for a number xD
instance Hashable Number where
  hashCode n = n

instance Hashable String where
  hashCode s = strHashCode s

data Map k v =
  Empty
  | Leaf k v
  | Collision (Array (Pair k v))
  | BitmapIndexed Number (Array (Map k v))

popCount n = let
  n2 = n - (bitAnd (bitShiftRight n 1) 1431655765)
  n3 = (bitAnd n2 858993459) + (bitAnd (bitShiftRight n2 2) 858993459)
  n4 = bitAnd (n3 + bitShiftRight n3 4) 252645135
  n5 = n4 + bitShiftRight n4 8
  n6 = n5 + bitShiftRight n5 16
  in bitAnd n6 127

hamtMask depth hash = let
  // Just the 5 bits of the hash for this depth (value 0-31).
  h = bitAnd (bitShiftRight hash (depth * 5)) 31
  // The mask for the h-th bit (from the right).
  in bitShiftLeft 1 h

hamtIndex bitmap mask = popCount (bitAnd bitmap (mask - 1))

lookup k t = let
  hash = hashCode k
  f depth t = case t of
    Empty -> Nothing
    Leaf k2 v -> case (k == k2) of
      False -> Nothing
      True -> Just v
    Collision entries -> fmap snd $ find (\e -> fst e == k) entries
    BitmapIndexed bitmap entries -> let
      m = hamtMask depth hash
      in case (bitAnd m bitmap) of
        0 -> Nothing
        _ -> f (depth + 1) (getIx (hamtIndex bitmap m) entries)
  in f 0 t

insert k v t = let
  hash = hashCode k
  f depth t = case t of
    Empty -> Leaf k v
    Collision entries -> Collision (push (k, v) (filter (\(k2, _) -> k2 /= k) entries))
    Leaf k2 v2 -> case (k == k2) of
      True -> Leaf k v
      False -> case depth of
        7 -> Collision [Pair k2 v2, Pair k v]
        _ -> let
          m = hamtMask depth (hashCode k2)
          in f depth (BitmapIndexed m [Leaf k2 v2])
    BitmapIndexed bitmap entries -> let
      m = hamtMask depth hash
      bitmap2 = bitOr m bitmap
      ix = hamtIndex bitmap2 m
      in case (bitAnd m bitmap) of
        0 -> BitmapIndexed bitmap2 (arrIns ix (Leaf k v) entries)
        _ -> BitmapIndexed bitmap2 (mapIx (f (depth + 1)) ix entries)
  in f 0 t

updateOrSet k f d m = case (lookup k m) of
  Nothing -> insert k d m
  Just x -> insert k (f x) m

remove k t = let
  hash = hashCode k
  f depth t = case t of
    Empty -> Empty
    Leaf k2 _ -> case (k2 == k) of
      True -> Empty
      False -> t
    Collision entries -> let
      entries2 = filter (\(k2, _) -> k2 /= k) entries
      in case (length entries2) of
        0 -> Empty
        1 -> case (getIx 0 entries2) of
          (k, v) -> Leaf k v
        _ -> Collision entries2
    BitmapIndexed bitmap entries -> let
      m = hamtMask depth hash
      ix = hamtIndex bitmap m
      in case (bitAnd m bitmap) of
        0 -> t
        _ -> case (f (depth + 1) (getIx ix entries)) of
          Empty -> let
            bitmap2 = bitAnd (bitNot m) bitmap
            in case (length entries) of
              1 -> Empty
              2 -> let e = getIx (bitAnd 1 (bitNot ix)) entries in case e of
                Leaf _ _ -> e
                _ -> BitmapIndexed bitmap2 [e]
              _ -> BitmapIndexed bitmap2 (arrDel ix 1 entries)
          e -> BitmapIndexed bitmap (setIx ix e entries)
  in f 0 t

foldTrie f a t = case t of
  Empty -> a
  Leaf k v -> f a k v
  Collision entries -> foldl (\a (k, v) -> f a k v) a entries
  BitmapIndexed _ entries -> foldl (foldTrie f) a entries

mapTrie f t = case t of
  Empty -> Empty
  Leaf k v -> Leaf k (f k v)
  Collision entries -> Collision $ map (\(k, v) -> (k, f k v)) entries
  BitmapIndexed bitmap entries -> BitmapIndexed bitmap $ map (mapTrie f) entries

size t = case t of
  Empty -> 0
  Leaf _ _ -> 1
  Collision entries -> length entries
  BitmapIndexed _ entries -> foldl (+) 0 (map size entries)

isEmpty t = case t of
  Empty -> True
  _ -> False

mergeTrie a b = foldTrie (\a k v -> insert k v a) a b

trieKeys m = foldTrie (\ks k _ -> push k ks) [] m
trieEntries m = foldTrie (\es k v -> push (k, v) es) [] m

insertAll es m = foldl (\m (k, v) -> insert k v m) m es

emptySet = Empty
setAdd a s = insert a Unit s
setAddAll vs s = foldl (\s v -> setAdd v s) s vs
setRemove = remove
setContains a s = isJust (lookup a s)
setUnion = mergeTrie
setToArray = foldTrie (\vs v _ -> push v vs) []
setDiff a b = foldTrie (\r k _ -> remove k r) a b
setIntersection a b = let
  f r k _ = case (setContains k a) of
    False -> r
    True -> setAdd k r
  in foldTrie f emptySet b

debug2 p x = snd (Pair (debug p) x)

debugIf p m x = case p of
  False -> x
  True -> debug2 m x

debugMaybe m x = case m of
  Nothing -> x
  Just m -> debug2 m x

debugWrap tag f = debug2 ('** start: ' ++ tag) $ let
  x = f Unit
  in debug2 ('** stop: ' ++ tag) x

data Identity a = Identity a

instance Functor Identity where
  fmap f (Identity a) = Identity (f a)

instance Applicative Identity where
  pure x = Identity x
  (<*>) (Identity f) x = fmap f x

instance Monad Identity where
  ret = pure
  (>>=) (Identity a) f = f a

(>=>) a b x = a x >>= b

mapFst f (a, b) = (f a, b)

mapSnd f (a, b) = (a, f b)

assert s b = case b of
  True -> True
  False -> error s

//instance Semigroup (Map String v) where
//  (<>) = mergeTrie

//instance Monoid (Map k v) where
//  mzero = Empty

split p xs = let
  f (ts, fs) x =
    case (p x) of
      True -> (push x ts, fs)
      False -> (ts, push x fs)
  in foldl f ([], []) xs
