import * from '//compiler/prelude.jg'
import * from '//compiler/parsers.jg'

data LexerState = LexerState
  String // input
  Number // position
  Number // line
  Number // column

data TokenType = WsTok | SymTok | NumTok | StrTok | OpTok | IdTok | ComTok
data Token = Token TokenType String Number Number

mkTok t = let
  parse i = case i of
    LexerState _ _ l c -> Success (\r -> Token t r l c) i
  in Parser parse

concatStr = foldl (\cs c -> cs ++ c) ''

runLexer p s = case p of
  Parser p -> p (LexerState s 0 0 0)

parseChar p = let
  parse s = case s of
    LexerState s i l c -> case (p (getChar i s)) of
      False -> Error 'parser failed'
      True -> case (getChar i s) of
        '\n' -> Success (getChar i s) (LexerState s (i + 1) (l + 1) 0)
        x -> Success (getChar i s) (LexerState s (i + 1) l (c + 1))
  in Parser parse

anyCharP = parseChar (\_ -> True)
charP cs = parseChar (\c -> containsChar c cs)
notCharP cs = parseChar (\c -> not (containsChar c cs))

manyStr p = pure concatStr <*> many p
someStr p = pure concatStr <*> some p

stringCharP = let 
  newLineP = charP '\\' |> charP 'n' |> pure '\n'
  escapeP = charP '\\' |> anyCharP
  notEndOfStringP = notCharP '\''
  in newLineP <|> escapeP <|> notEndOfStringP
stringP = mkTok StrTok <*> (charP '\'' |> manyStr stringCharP <| charP '\'')

whitespaceP = mkTok WsTok <*> someStr (charP ' \n')

intP = someStr (charP digits)
numP = mkTok NumTok <*> (pure (++) <*> intP <*> ((pure (++) <*> charP '.' <*> intP) <|> pure ''))

lineCommentP = mkTok ComTok <*> (charP '/' |> charP '/' |> manyStr (notCharP '\n'))

symbolP = mkTok SymTok <*> charP '()[]{},\\'

identP = mkTok IdTok <*> (pure (++) <*> charP (letters ++ '_') <*> manyStr (charP (letters ++ digits ++ '_')))
opIdentP = mkTok IdTok <*> (charP '(' |> someStr (charP '-+*/=:&|<>^$') <| charP ')')

opP = mkTok OpTok <*> someStr (charP '-+*/=:&|<>^$')

jaguarTokenP = many (stringP <|> whitespaceP <|> numP <|> lineCommentP <|> identP <|> opIdentP <|> opP <|> symbolP)

tokenize = runLexer jaguarTokenP
