import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {skolemize} from '//compiler/typer.jg'

translateAdts m = case m of
  Module ann fn is ds cs ins bs -> Module ann fn is [] cs ins (concat (concatMap rewriteData ds) bs)

rewriteData d = case d of
  Data _ n vs cs -> let 
    dt = foldl (\r v -> TApp emptyAnn r (TVar emptyAnn v)) (TConst emptyAnn n) vs
    rewriteCon c = let
      tag = case (length cs) of
        1 -> Nothing
        _ -> Just (fst c)
      in case (snd c) of DataCon _ n ts -> mkConFun tag dt vs n ts
    in map rewriteCon (zipWithIndex cs)

mkConFun tag dt vs n ts = let
  nts = map (\it -> Pair ('$_' ++ intToString (fst it)) (snd it)) (zipWithIndex ts)
  new = setType dt (New emptyAnn n (map (\nt -> Var emptyAnn (fst nt)) nts))
  mkCon r nt = case nt of
    Pair n t -> setType (TApp emptyAnn (TApp emptyAnn (TConst emptyAnn '->') t) (getType r)) (Lam emptyAnn n r)
  con = foldr mkCon new nts
  conT = TForall emptyAnn vs [] (getType con)
  ann = setAnn 'export' (AnnExport n) (setAnn 'type' (AnnType conT) (setAnn 'data' (AnnData tag) emptyAnn))
  in Pair n (skolemize (withAnn ann con))
