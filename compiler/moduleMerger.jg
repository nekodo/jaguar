import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {newIdent, rewriteExpr} from '//compiler/uniquifier.jg'

mergeModules ms = evalState Empty (foldM mergeInto (head ms) (tail ms))

dropExport f b = case b of
  Pair n e -> case (getAnn 'export' (annOf e)) of
    Nothing -> ret b
    Just (AnnExport en) -> gets >>= \ns ->
      sets (insert (f ++ '#' ++ en) n ns) >> 
        ret (Pair n (withAnn (remove 'export' (annOf e)) e))

mergeInto a b = case a of
  Module ann fn is _ _ _ bs -> mapM (dropExport fn) bs >>= \bs -> gets >>= \ns -> let
    dataAnns = let
      f r b = case b of
        Pair n e -> case (getAnn 'data' (annOf e)) of
          Nothing -> r
          Just da -> insert n (setAnn 'data' da emptyAnn) r
      in foldl f Empty bs
    in case b of
      Module _ fn is2 _ _ _ bs2 ->
        ret (Module ann fn is [] [] [] (concat bs (concat (concatMap (importAsBindings ns dataAnns) is2) bs2)))

importAsBindings ens dataAnns i = case i of
  ImportOpen _ './builtins.js' _ -> []
  ImportOpen _ fn ns -> let
    f p = case p of
      Pair nf nt -> case (lookup (fn ++ '#' ++ nf) ens) of
        Just nf -> Pair nt (Var (justOr emptyAnn $ lookup nf dataAnns) nf)
        Nothing -> error ('mod merger encountered unknown import ' ++ fn ++ '#' ++ nf)
    in map f (filter (\p -> fst p /= snd p) ns)
