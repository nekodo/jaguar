import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {getUid, setUid, getExports} from '//compiler/pass.jg'

newIdent n = gets >>= \i -> sets (i + 1) >> ret (n ++ '_' ++ intToString i)

rewriteExpr env e = let
  rename n = newIdent n
  renamePat p = case p of
    PConst _ _ -> ret (Pair p Empty)
    PVar ann v -> rename v >>= \n -> ret (Pair (PVar ann n) (insert v n Empty))
    PData ann n ps -> mapM renamePat ps >>= \ps ->
      case (lookup n env) of
        Nothing -> ret (Pair (PData ann n (map fst ps)) (foldl mergeTrie Empty (map snd ps)))
        Just n2 -> ret (Pair (PData ann n2 (map fst ps)) (foldl mergeTrie Empty (map snd ps)))
  rewritePat p = case p of Pair pat e -> renamePat pat >>= \pe -> case pe of Pair pat penv -> rewriteExpr (mergeTrie env penv) e >>= \e -> ret (Pair pat e)
  f e = case e of
    Lam ann p e -> rename p >>= \n -> rewriteExpr (insert p n env) e >>= \e -> ret (Right (Lam ann n e))
    Let ann bs e -> rewriteBindings env bs >>= \ebs -> case ebs of
      Pair env bs -> rewriteExpr env e >>= \e -> ret (Right (Let ann bs e))
    Case ann e ps -> rewriteExpr env e >>= \e -> mapM rewritePat ps >>= \ps -> ret (Right (Case ann e ps))
    Var ann v -> case (lookup v env) of
      Just v2-> ret (Left (Var ann v2))
      Nothing -> ret (Left e)
    New ann tag es -> case (lookup tag env) of
      Just tag2 -> ret (Left (New ann tag2 es))
      Nothing -> ret (Left e)
    _ -> ret (Left e)
  in breakableDownM f e

rewriteBindings env bs = let
  ns = map fst bs
  ns2 = mapM newIdent ns
  in ns2 >>= \ns -> let
    env2 = insertAll (zip (map fst bs) ns) env
    bs2 = mapM (rewriteExpr env2) (map snd bs)
    in bs2 >>= \bs -> ret (Pair env2 (zip ns bs))

renameImport er i = case er of
  Pair env r -> case i of
    ImportOpen _ './builtins.js' _ -> ret (Pair env (push i r))
    ImportOpen ann f ns -> let
      rename er p = case er of
        Pair env r -> case p of
          Pair nf nt -> newIdent nt >>= \n -> ret (Pair (insert nt n env) (push (Pair nf n) r))
      in foldM rename (Pair env []) ns >>= \ens -> case ens of
        Pair env ns -> ret (Pair env (push (ImportOpen ann f ns) r))

rewriteModule ms m = case m of
  Module ann fn is _ _ _ bs ->
    foldM renameImport (Pair Empty []) is >>= \(env, is) ->
      rewriteBindings env bs >>= \(_, bs) ->
        ret (Module ann fn is [] [] [] bs)

uniquify m = getUid >>= \uid -> getExports >>= \ex -> let
  r = runState uid (rewriteModule ex m)
  in setUid (fst r) >> ret (snd r)
