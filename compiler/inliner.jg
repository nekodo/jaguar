import * from '//compiler/prelude.jg'
import * from '//compiler/ast.jg'
import {reallyPrintExpr} from '//compiler/printer.jg'
import {rewriteExpr as renameExpr} from '//compiler/uniquifier.jg'
import {getUid, setUid} from '//compiler/pass.jg'

inline m = getUid >>= \uid -> case m of
  Module ann fn is ds cs ins bs -> let
    r = runState uid (loopPasses 0 pass bs)
    bs2 = snd r
    uid2 = fst r
    bs3 = mapBindings (\e -> snd $ annWithUseCount e) bs2
    useCount = foldl mergeCount Empty (map (\b -> getCount (snd b)) bs3)
    is2 = processImports useCount is
    in setUid uid2 >> ret (Module ann fn is2 ds cs ins bs3)

getCount e = case (getAnn 'useCount' (annOf e)) of
  Just (AnnUseCount c) -> c
mergeCount a b = foldTrie (\a k v -> insert k (v + (justOr 0 (lookup k a))) a) a b

annWithUseCount e = let
  dropCount n c = remove n c
  countCase pe = case pe of
    Pair p e -> countPat (getCount e) p
  countPat c p = case p of
    PVar _ n -> dropCount n c
    PData _ n ps -> foldl countPat c ps
    _ -> c
  countExpr e = case e of
    Var _ n -> insert n 1 Empty
    App _ f e -> mergeCount (getCount f) (getCount e)
    Lam _ p e -> dropCount p (getCount e)
    Let _ bs e -> foldl (\c n -> dropCount n c) (foldl (\c e -> mergeCount c (getCount e)) (getCount e) (map snd bs)) (map fst bs)
    Case _ e ps -> foldl mergeCount (getCount e) (map countCase ps)
    Const _ _ -> Empty
    New _ _ es -> foldl mergeCount Empty (map getCount es)
  in up (\a e -> Pair a $ withAnn (setAnn 'useCount' (AnnUseCount $ countExpr e) (annOf e)) e) Unit e

mapBindings f bs = map (\b -> case b of Pair n e -> Pair n (f e)) bs
mapBindingsM f bs = mapM (\b -> case b of Pair n e -> f n e >>= \e -> ret (Pair n e)) bs

loopPasses n p bs = case n of
  0 -> ret bs
  _ -> p bs >>= loopPasses (n - 1) p

pass bs = let
  bs2 = mapBindings (\e -> snd $ annWithUseCount e) bs
  useCount = foldl mergeCount Empty (map (\b -> getCount (snd b)) bs2)
  bs3 = mapBindings deadCode (dropDeadBindings useCount bs2)
  always = chooseForInlining Empty bs3
  in mapBindingsM (\n e -> inlineCode (remove n always) e) bs3 >>= \bs ->
    ret (mapBindings betaReduction bs)

processImports useCount is = is

deadCode e = let
  f e = case e of
    Let ann bs e -> let
      useCount = foldl mergeCount (getCount e) (map (\b -> getCount (snd b)) bs)
      bs2 = dropDeadBindings useCount bs
      in Let ann bs2 e
    _ -> e
  in snd (down (\a e -> Pair a (f e)) Unit e)

exprSize e = case e of
  Var _ _ -> 1
  Const _ _ -> 1
  App _ f a -> 1 + exprSize f + exprSize a
  Lam _ _ e -> 1 + exprSize e
  Case _ e ps -> 1 + foldl (\c p -> case p of Pair pat e -> c + patSize pat + exprSize e) (exprSize e) ps
  Let _ bs e -> 1 + foldl (\c b -> c + exprSize (snd b)) (exprSize e) bs
  New _ _ es -> foldl (\c e -> c + exprSize e) 1 es

patSize p = case p of
  PVar _ _ -> 1
  PConst _ _ -> 1
  PData _ _ ps -> foldl (\c p -> c + patSize p) 1 ps

chooseForInlining baseCount bs = let
  useCount = foldl mergeCount baseCount (map (\b -> getCount (snd b)) bs)
  f r b = case b of
    Pair n e -> case e of
      Var _ _ -> insert n e r
      Const _ _ -> insert n e r
      Lam _ _ _ -> case ((exprSize e < 10) || (1 == justOr 0 (lookup n useCount))) of
        False -> r
        True -> insert n e r
      New _ _ _ -> case (1 == justOr 0 (lookup n useCount)) of
        False -> r
        True -> insert n e r
      _ -> r
  in foldl f Empty bs

betaReduction e = let
  f e = case e of
    App ann (Lam _ p a) b -> case b of
      Var ann2 v -> case (p == v) of
        True -> a
        False -> Let ann [Pair p (Var ann2 v)] a
      _ -> Let ann [Pair p b] a
    _ -> e
  in snd (down (\a e -> Pair a (f e)) Unit e)

inlineCode always e = let
  withAnnCopy ann e = withAnn (mergeTrie (remove 'export' (annOf e)) (copyAnn ['export'] ann)) e
  inlineExpr e = case e of
    Var ann v -> case (lookup v always) of
      Nothing -> ret (Left e)
      Just e -> fmap (\e -> Left (withAnnCopy ann e)) (renameExpr empty e)
    Let ann bs e -> let
      always2 = mergeTrie always (chooseForInlining (getCount e) bs)
      in mapBindingsM (\n e -> inlineCode (remove n always2) e) bs >>= \bs ->
        inlineCode always2 e >>= \e -> case (length bs) of
          0 -> ret (Right (withAnnCopy ann e))
          _ -> ret (Right (Let ann bs e))
    Case ann e ps -> ret (Left (Case ann e (map (\p -> case p of Pair pat e -> Pair (inlinePat pat) e) ps)))
    //App _ (App _ (Var _ 'push') x) (New ann 'Array' xs) -> ret (Left (New ann 'Array' (push x xs)))
    //App _ (App _ (Var _ 'enqueue') _) (New _ 'Array' _) -> debug2 ('could fold enqueue') (ret (Left e))
    //App _ (Var _ 'length') (New _ 'Array' _) -> debug2 ('could fold length') (ret (Left e))
    //App _ (App _ (Var _ 'getIx') _) (New _ 'Array' _) -> debug2 ('could fold getIx') (ret (Left e))
    _ -> ret (Left e)
  inlinePat p = case p of
    PData ann n ps -> case (lookup n always) of
      Just (Var _ v) -> PData ann v (map inlinePat ps)
      _ -> PData ann n (map inlinePat ps)
    _ -> p 
  in breakableDownM inlineExpr e

dropDeadBindings useCount bs = let
  isExport e = isJust (getAnn 'export' (annOf e))
  f b = case b of
    Pair n e -> let
      totalCount = justOr 0 (lookup n useCount)
      recursiveCount = justOr 0 (lookup n (getCount e))
      keep = isExport e || ((totalCount - recursiveCount) > 0)
      in case keep of
        True -> Just (Pair n e)
        False -> let ann = annOf e in case (getAnn 'data' ann) of
          Nothing -> Nothing
          Just _ -> Just (Pair n (withAnn (setAnn 'dead' AnnTag ann) e))
  in mapJust f bs
